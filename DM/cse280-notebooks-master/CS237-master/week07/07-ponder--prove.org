#+TITLE: DM1 Week 07 Ponder and Prove Assignment
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t d:(not "HINT")
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup
#+BEGIN: clocktable :maxlevel 2 :scope file
#+CAPTION: Clock summary at [2018-03-09 Fri 11:56]
| Headline                 |       Time |      |
|--------------------------+------------+------|
| *Total time*             | *1d 13:40* |      |
|--------------------------+------------+------|
| Exercises                |       9:52 |      |
| \_  Read PQR through PQX |            | 6:21 |
| \_  GMQ                  |            | 1:42 |
| \_  GMY                  |            | 1:41 |
| \_  JQA                  |            | 0:05 |
| \_  GRZ                  |            | 0:01 |
| \_  JYA                  |            | 0:01 |
| \_  GXF                  |            | 0:01 |
| Problems                 |      18:31 |      |
| \_  XAJ *                |            | 1:01 |
| \_  JPZ                  |            | 1:08 |
| \_  XFO                  |            | 8:38 |
| \_  GYN                  |            | 1:11 |
| \_  XGG                  |            | 6:33 |
| Puzzle                   |       9:17 |      |
| \_  GYI                  |            | 9:17 |
#+END:

* Instructions
  See [[file:../week02/02-ponder--prove.org]]

* Exercises
** DONE Read PQR through PQX
   CLOSED: [2018-02-28 Tue 23:15]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 16:54]--[2018-02-27 Tue 23:15] =>  6:21
   :END:
** DONE GMQ
   CLOSED: [2018-02-27 Tue 18:56]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 17:49]--[2018-02-27 Tue 18:54] =>  1:05
   CLOCK: [2018-02-27 Tue 16:54]--[2018-02-27 Tue 17:31] =>  0:37
   :END:
#+begin_note
  First recall (or look up) how the =&rest= keyword works, e.g.:

#+BEGIN_SRC emacs-lisp :results silent
  (defun printf (format-directive &rest args)
    (princ (apply 'format format-directive args)))
#+END_SRC

  Now explain what this code does after trying it on a few tests:

#+BEGIN_SRC emacs-lisp :results silent
  (defun mystery (&rest numbers)
    (loop for n from 0 to (apply '* numbers)
          do (printf "%3d <--> %s\n" n
                     (loop for m in numbers collect (mod n m)))))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results output
  (mystery 3 5)
#+END_SRC

#+RESULTS:
#+begin_example
  0 <--> (0 0)
  1 <--> (1 1)
  2 <--> (2 2)
  3 <--> (0 3)
  4 <--> (1 4)
  5 <--> (2 0)
  6 <--> (0 1)
  7 <--> (1 2)
  8 <--> (2 3)
  9 <--> (0 4)
 10 <--> (1 0)
 11 <--> (2 1)
 12 <--> (0 2)
 13 <--> (1 3)
 14 <--> (2 4)
 15 <--> (0 0)
#+end_example

#+BEGIN_SRC emacs-lisp :results output
  (mystery 4 6)
#+END_SRC

#+RESULTS:
#+begin_example
  0 <--> (0 0)
  1 <--> (1 1)
  2 <--> (2 2)
  3 <--> (3 3)
  4 <--> (0 4)
  5 <--> (1 5)
  6 <--> (2 0)
  7 <--> (3 1)
  8 <--> (0 2)
  9 <--> (1 3)
 10 <--> (2 4)
 11 <--> (3 5)
 12 <--> (0 0)
 13 <--> (1 1)
 14 <--> (2 2)
 15 <--> (3 3)
 16 <--> (0 4)
 17 <--> (1 5)
 18 <--> (2 0)
 19 <--> (3 1)
 20 <--> (0 2)
 21 <--> (1 3)
 22 <--> (2 4)
 23 <--> (3 5)
 24 <--> (0 0)
#+end_example

  Replace ='*= with ='lcm= and do the same calls again. Explain what you
  observed, and come up with a better name for the =mystery= function.
:HINT:
  - Hint :: In your source code blocks, use the header directive =:results
            output= for best results, e.g.:
: #+BEGIN_SRC emacs-lisp :results output
  - Peek Ahead Hint :: PQU
:END:
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
from functools import *
def gcdr(a,b):
    r=a%b
    if r==0:
        return b
    elif r==1:
        return 1
    return gcdr(b,r)
def lcm(a,b):
    return (a*b)/gcdr(a,b)
def lcmr(args):
    s = 1
    for i in args:
        s = lcm(i,s)
    return s
def print_cool(*args):
    print("{} <--> ( {})".format(args[0],unpack(args[0],args[1:])))
def unpack(i,rest):
    string = ""
    for j in rest:
        string += "{} ".format(i%j)
    return string
def RMOD(*args):
    print("MOD with redundancies:")
    for i in range (0,reduce(lambda x, y: x*y, args, 1)+1):
        print_cool(i,*args)
def MOD(*args):
    print("MOD without redundancies:")
    for i in range(0,int(lcmr(args)+1)):
        print_cool(i,*args)

RMOD(2,3,5)
MOD(2,3,5)
#+END_SRC

#+RESULTS:
#+begin_example
MOD with redundancies:
0 <--> ( 0 0 0 )
1 <--> ( 1 1 1 )
2 <--> ( 0 2 2 )
3 <--> ( 1 0 3 )
4 <--> ( 0 1 4 )
5 <--> ( 1 2 0 )
6 <--> ( 0 0 1 )
7 <--> ( 1 1 2 )
8 <--> ( 0 2 3 )
9 <--> ( 1 0 4 )
10 <--> ( 0 1 0 )
11 <--> ( 1 2 1 )
12 <--> ( 0 0 2 )
13 <--> ( 1 1 3 )
14 <--> ( 0 2 4 )
15 <--> ( 1 0 0 )
16 <--> ( 0 1 1 )
17 <--> ( 1 2 2 )
18 <--> ( 0 0 3 )
19 <--> ( 1 1 4 )
20 <--> ( 0 2 0 )
21 <--> ( 1 0 1 )
22 <--> ( 0 1 2 )
23 <--> ( 1 2 3 )
24 <--> ( 0 0 4 )
25 <--> ( 1 1 0 )
26 <--> ( 0 2 1 )
27 <--> ( 1 0 2 )
28 <--> ( 0 1 3 )
29 <--> ( 1 2 4 )
30 <--> ( 0 0 0 )
MOD without redundancies:
0 <--> ( 0 0 0 )
1 <--> ( 1 1 1 )
2 <--> ( 0 2 2 )
3 <--> ( 1 0 3 )
4 <--> ( 0 1 4 )
5 <--> ( 1 2 0 )
6 <--> ( 0 0 1 )
7 <--> ( 1 1 2 )
8 <--> ( 0 2 3 )
9 <--> ( 1 0 4 )
10 <--> ( 0 1 0 )
11 <--> ( 1 2 1 )
12 <--> ( 0 0 2 )
13 <--> ( 1 1 3 )
14 <--> ( 0 2 4 )
15 <--> ( 1 0 0 )
16 <--> ( 0 1 1 )
17 <--> ( 1 2 2 )
18 <--> ( 0 0 3 )
19 <--> ( 1 1 4 )
20 <--> ( 0 2 0 )
21 <--> ( 1 0 1 )
22 <--> ( 0 1 2 )
23 <--> ( 1 2 3 )
24 <--> ( 0 0 4 )
25 <--> ( 1 1 0 )
26 <--> ( 0 2 1 )
27 <--> ( 1 0 2 )
28 <--> ( 0 1 3 )
29 <--> ( 1 2 4 )
30 <--> ( 0 0 0 )
#+end_example

This function's name should be RNS.
The '* function uses the range(0,p*q), while 'lcm uses the least common multiple as a max for the range.
The '* function will many times have redundancies, while the 'lcm will not.
#+end_info
** DONE GMY
   CLOSED: [2018-02-27 Tue 20:37]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 18:56]--[2018-02-27 Tue 20:37] =>  1:41
   :END:
#+begin_note
  Replace the =;;...= line with three lines, binding the values of =y1=, =y2= and
  =y3=. Write a helper function to compute these values.

#+BEGIN_SRC emacs-lisp :results silent
(require 'cl) ;; for destructuring-bind

(defun egcd (a b)
  "Computes the greatest common divisor of a and b recursively.
   This extended version returns a list of d, x and y, where
   d = ax + by = gcd(a, b)."
  (if (zerop b)
      (list a 1 0)
    (let ((q (/ a b))
          (r (% a b)))
      (destructuring-bind (d x y) (egcd b r)
        (list d y (- x (* q y)))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (let* ((r1 4)
         (r2 2)
         (r3 9)
         (m1 7)
         (m2 11)
         (m3 13)
         (m (* m1 m2 m3))
         (o1 (/ m m1))
         (o2 (/ m m2))
         (o3 (/ m m3))
         (y1 (second (egcd o1 m1)))
         (y2 (second (egcd o2 m2)))
         (y3 (second (egcd o3 m3)))
         )
    (mod (+ (* r1 o1 y1) (* r2 o2 y2) (* r3 o3 y3)) m))
#+END_SRC

#+RESULTS:
: 893

:HINT:
  - Hint :: The y\rsquo{}s are just the MMIs of the o\rsquo{}s mod the m\rsquo{}s. The helper
            function should use the Extended Euclidean GCD algorithm to compute
            these MMIs.
:END:
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
def egcd(a,b):
    if a==0:
        return (b,0,1)
    g,x,y = egcd(b%a,a)
    return (g,(y-(b//a)*x),x)

r,m = {1:4,2:2,3:9},{1:7,2:11,3:13}
mod = (m[1]*m[2]*m[3])
o,y = {1:mod//m[1],2:mod//m[2],3:mod//m[3]},{}
for i in range(1,4): y[i] = egcd(o[i],m[i])[1]
top = 0
for i in range(1,4): top += (r[i]*o[i]*y[i])
print(top%mod)
#+END_SRC

#+RESULTS:
: 893

#+end_info
#+BEGIN_update
Updated version using functional programming below.
#+END_update
#+BEGIN_SRC python :results output
from functools import *
egcd = lambda a,b: (lambda g,x,y: (g,y-(b//a)*x,x))(*egcd(b%a,a)) if a else (b,0,1) #lambda egcd recursive
ey = lambda o,m: egcd(o,m)[1] #Return Y value from egcd
mapc = lambda *args: list(map(args[0],*args[1:])) #mapcar*
P = lambda *args: reduce(lambda x,y: x*y,args,1) #product list
D = lambda mod,m: list(map(lambda x: mod//x,m)) #Integer division through list
Y = lambda o,m: list(map(ey,o,m)) #Get Y values of egcd for list
M = lambda *args: list(list(zip(*args))[0]) #Gives M values list
R = lambda *args: list(list(zip(*args))[1]) #Gives R values list
Mod = lambda *args: P(*M(*args)) #Gets mod value
gO = lambda *args: D(Mod(*args),M(*args)) #Givess O values list
gY = lambda *args: Y(gO(*args),M(*args)) #Gives Y values list
from_rns = lambda *args: sum(mapc(P,R(*args),gO(*args),gY(*args)))%Mod(*args) #Main from_rns function
print(from_rns((7,4),(11,2),(13,9)))
#+END_SRC

#+RESULTS:
: 893

#+BEGIN_info
Shorter version using functional programming below.
#+END_info
#+BEGIN_SRC python :results output
from functools import *
egcd = lambda a,b: (lambda g,x,y: (g,y-(b//a)*x,x))(*egcd(b%a,a)) if a else (b,0,1) #lambda egcd recursive
ey = lambda o,m: egcd(o,m)[1] #Return Y value from egcd
mapc = lambda *n: list(map(n[0],*n[1:])) #mapcar*
P = lambda *n: reduce(lambda x,y: x*y,n,1) #product list
from_rns = lambda *n: sum(mapc(P,list(list(zip(*n))[1]),list(map(lambda x: reduce(lambda x,y: x*y,list(list(zip(*n))[0]),1)//x,list(list(zip(*n))[0]))),list(map(ey,list(map(lambda x: reduce(lambda x,y: x*y,list(list(zip(*n))[0]),1)//x,list(list(zip(*n))[0]))),list(list(zip(*n))[0])))))%reduce(lambda x,y: x*y,list(list(zip(*n))[0]),1)
print(from_rns((7,4),(11,2),(13,9)))
#+END_SRC

#+RESULTS:
: 893

** DONE JQA
   CLOSED: [2018-02-27 Tue 20:43]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 20:38]--[2018-02-27 Tue 20:43] =>  0:05
   :END:
#+begin_note
   What is a 3-digit positive simultaneous solution to the following system of
   linear congruences?

   x \equiv_7 3

   x \equiv_{11} 5

   x \equiv_{13} 4
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
def egcd(a,b):
    if a==0:
        return (b,0,1)
    g,x,y = egcd(b%a,a)
    return (g,(y-(b//a)*x),x)

r,m = {1:3,2:5,3:4},{1:7,2:11,3:13}
mod = (m[1]*m[2]*m[3])
o,y = {1:mod//m[1],2:mod//m[2],3:mod//m[3]},{}
for i in range(1,4): y[i] = egcd(o[i],m[i])[1]
top = 0
for i in range(1,4):
    top += (r[i]*o[i]*y[i])
result = top%mod
print(result)
#+END_SRC

#+RESULTS:
: 654

#+end_info
** DONE GRZ
   CLOSED: [2018-02-27 Tue 20:44]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 20:43]--[2018-02-27 Tue 20:44] =>  0:01
   :END:
#+begin_note
   What is a 3-digit positive simultaneous solution to the following system of
   linear congruences?

   x \equiv_7 3

   x \equiv_{11} 2

   x \equiv_{13} 1
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
def egcd(a,b):
    if a==0:
        return (b,0,1)
    g,x,y = egcd(b%a,a)
    return (g,(y-(b//a)*x),x)

r,m = {1:3,2:2,3:1},{1:7,2:11,3:13}
mod = (m[1]*m[2]*m[3])
o,y = {1:mod//m[1],2:mod//m[2],3:mod//m[3]},{}
for i in range(1,4): y[i] = egcd(o[i],m[i])[1]
top = 0
for i in range(1,4):
    top += (r[i]*o[i]*y[i])
result = top%mod
print(result)
#+END_SRC

#+RESULTS:
: 794

#+end_info
** DONE JYA
   CLOSED: [2018-02-27 Tue 20:45]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 20:44]--[2018-02-27 Tue 20:45] =>  0:01
   :END:
#+begin_note
   What is a 3-digit positive simultaneous solution to the following system of
   linear congruences?

   x \equiv_7 2

   x \equiv_{11} 3

   x \equiv_{13} 4
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
def egcd(a,b):
    if a==0:
        return (b,0,1)
    g,x,y = egcd(b%a,a)
    return (g,(y-(b//a)*x),x)

r,m = {1:2,2:3,3:4},{1:7,2:11,3:13}
mod = (m[1]*m[2]*m[3])
o,y = {1:mod//m[1],2:mod//m[2],3:mod//m[3]},{}
for i in range(1,4): y[i] = egcd(o[i],m[i])[1]
top = 0
for i in range(1,4):
    top += (r[i]*o[i]*y[i])
result = top%mod
print(result)
#+END_SRC

#+RESULTS:
: 212

#+end_info
** DONE GXF
   CLOSED: [2018-02-27 Tue 20:46]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 20:45]--[2018-02-27 Tue 20:46] =>  0:01
   :END:
#+begin_note
   What is a 3-digit positive simultaneous solution to the following system of
   linear congruences?

   x \equiv_7 0

   x \equiv_{11} 8

   x \equiv_{13} 12
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
def egcd(a,b):
    if a==0:
        return (b,0,1)
    g,x,y = egcd(b%a,a)
    return (g,(y-(b//a)*x),x)

r,m = {1:0,2:8,3:12},{1:7,2:11,3:13}
mod = (m[1]*m[2]*m[3])
o,y = {1:mod//m[1],2:mod//m[2],3:mod//m[3]},{}
for i in range(1,4): y[i] = egcd(o[i],m[i])[1]
top = 0
for i in range(1,4):
    top += (r[i]*o[i]*y[i])
result = top%mod
print(result)
#+END_SRC

#+RESULTS:
: 987

#+end_info
* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** DONE XAJ *
   CLOSED: [2018-03-09 Fri 11:54]
   :LOGBOOK:
   CLOCK: [2018-03-09 Fri 11:33]--[2018-03-09 Fri 11:54] =>  0:21
   CLOCK: [2018-03-09 Fri 00:00]--[2018-03-09 Fri 00:40] =>  0:40
   :END:
#+begin_note
  Are there any 3-digit (d_{1}d_{2}d_{3}) positive simultaneous solutions to a system of
  linear congruences

   x \equiv_7 r_1

   x \equiv_{11} r_2

   x \equiv_{13} r_3

  with the property that d_1 = r_1, d_2 = r_2, and d_3 = r_3?
#+end_note
#+BEGIN_SRC python :results output
from functools import *
egcd = lambda a,b: (lambda g,x,y: (g,y-(b//a)*x,x))(*egcd(b%a,a)) if a else (b,0,1) #lambda egcd recursive
ey = lambda o,m: egcd(o,m)[1] #Return Y value from egcd
mapc = lambda *n: list(map(n[0],*n[1:])) #mapcar*
P = lambda *n: reduce(lambda x,y: x*y,n,1) #product list
from_rns = lambda *n: sum(mapc(P,list(list(zip(*n))[1]),list(map(lambda x: reduce(lambda x,y: x*y,list(list(zip(*n))[0]),1)//x,list(list(zip(*n))[0]))),list(map(ey,list(map(lambda x: reduce(lambda x,y: x*y,list(list(zip(*n))[0]),1)//x,list(list(zip(*n))[0]))),list(list(zip(*n))[0])))))%reduce(lambda x,y: x*y,list(list(zip(*n))[0]),1)

def find_stuff(m):
    cool = []
    for i in range(0,1000):
        i_str = str(i)
        if len(str(i)) < 3:
            if len(i_str) == 1: i_str = "00"+i_str
            else: i_str = "0"+i_str
        ilist = [int(x) for x in i_str]
        frns = from_rns(*list(zip(m,ilist)))
        print(list(zip(m, ilist)),"frns = {}, i = {}".format(frns,i))
        if frns == i:
            cool.append(i)
    return cool

print(find_stuff([7,11,13]))
#+END_SRC

#+RESULTS:
#+begin_example
[(7, 0), (11, 0), (13, 0)] frns = 0, i = 0
[(7, 0), (11, 0), (13, 1)] frns = 924, i = 1
[(7, 0), (11, 0), (13, 2)] frns = 847, i = 2
[(7, 0), (11, 0), (13, 3)] frns = 770, i = 3
[(7, 0), (11, 0), (13, 4)] frns = 693, i = 4
[(7, 0), (11, 0), (13, 5)] frns = 616, i = 5
[(7, 0), (11, 0), (13, 6)] frns = 539, i = 6
[(7, 0), (11, 0), (13, 7)] frns = 462, i = 7
[(7, 0), (11, 0), (13, 8)] frns = 385, i = 8
[(7, 0), (11, 0), (13, 9)] frns = 308, i = 9
[(7, 0), (11, 1), (13, 0)] frns = 364, i = 10
[(7, 0), (11, 1), (13, 1)] frns = 287, i = 11
[(7, 0), (11, 1), (13, 2)] frns = 210, i = 12
[(7, 0), (11, 1), (13, 3)] frns = 133, i = 13
[(7, 0), (11, 1), (13, 4)] frns = 56, i = 14
[(7, 0), (11, 1), (13, 5)] frns = 980, i = 15
[(7, 0), (11, 1), (13, 6)] frns = 903, i = 16
[(7, 0), (11, 1), (13, 7)] frns = 826, i = 17
[(7, 0), (11, 1), (13, 8)] frns = 749, i = 18
[(7, 0), (11, 1), (13, 9)] frns = 672, i = 19
[(7, 0), (11, 2), (13, 0)] frns = 728, i = 20
[(7, 0), (11, 2), (13, 1)] frns = 651, i = 21
[(7, 0), (11, 2), (13, 2)] frns = 574, i = 22
[(7, 0), (11, 2), (13, 3)] frns = 497, i = 23
[(7, 0), (11, 2), (13, 4)] frns = 420, i = 24
[(7, 0), (11, 2), (13, 5)] frns = 343, i = 25
[(7, 0), (11, 2), (13, 6)] frns = 266, i = 26
[(7, 0), (11, 2), (13, 7)] frns = 189, i = 27
[(7, 0), (11, 2), (13, 8)] frns = 112, i = 28
[(7, 0), (11, 2), (13, 9)] frns = 35, i = 29
[(7, 0), (11, 3), (13, 0)] frns = 91, i = 30
[(7, 0), (11, 3), (13, 1)] frns = 14, i = 31
[(7, 0), (11, 3), (13, 2)] frns = 938, i = 32
[(7, 0), (11, 3), (13, 3)] frns = 861, i = 33
[(7, 0), (11, 3), (13, 4)] frns = 784, i = 34
[(7, 0), (11, 3), (13, 5)] frns = 707, i = 35
[(7, 0), (11, 3), (13, 6)] frns = 630, i = 36
[(7, 0), (11, 3), (13, 7)] frns = 553, i = 37
[(7, 0), (11, 3), (13, 8)] frns = 476, i = 38
[(7, 0), (11, 3), (13, 9)] frns = 399, i = 39
[(7, 0), (11, 4), (13, 0)] frns = 455, i = 40
[(7, 0), (11, 4), (13, 1)] frns = 378, i = 41
[(7, 0), (11, 4), (13, 2)] frns = 301, i = 42
[(7, 0), (11, 4), (13, 3)] frns = 224, i = 43
[(7, 0), (11, 4), (13, 4)] frns = 147, i = 44
[(7, 0), (11, 4), (13, 5)] frns = 70, i = 45
[(7, 0), (11, 4), (13, 6)] frns = 994, i = 46
[(7, 0), (11, 4), (13, 7)] frns = 917, i = 47
[(7, 0), (11, 4), (13, 8)] frns = 840, i = 48
[(7, 0), (11, 4), (13, 9)] frns = 763, i = 49
[(7, 0), (11, 5), (13, 0)] frns = 819, i = 50
[(7, 0), (11, 5), (13, 1)] frns = 742, i = 51
[(7, 0), (11, 5), (13, 2)] frns = 665, i = 52
[(7, 0), (11, 5), (13, 3)] frns = 588, i = 53
[(7, 0), (11, 5), (13, 4)] frns = 511, i = 54
[(7, 0), (11, 5), (13, 5)] frns = 434, i = 55
[(7, 0), (11, 5), (13, 6)] frns = 357, i = 56
[(7, 0), (11, 5), (13, 7)] frns = 280, i = 57
[(7, 0), (11, 5), (13, 8)] frns = 203, i = 58
[(7, 0), (11, 5), (13, 9)] frns = 126, i = 59
[(7, 0), (11, 6), (13, 0)] frns = 182, i = 60
[(7, 0), (11, 6), (13, 1)] frns = 105, i = 61
[(7, 0), (11, 6), (13, 2)] frns = 28, i = 62
[(7, 0), (11, 6), (13, 3)] frns = 952, i = 63
[(7, 0), (11, 6), (13, 4)] frns = 875, i = 64
[(7, 0), (11, 6), (13, 5)] frns = 798, i = 65
[(7, 0), (11, 6), (13, 6)] frns = 721, i = 66
[(7, 0), (11, 6), (13, 7)] frns = 644, i = 67
[(7, 0), (11, 6), (13, 8)] frns = 567, i = 68
[(7, 0), (11, 6), (13, 9)] frns = 490, i = 69
[(7, 0), (11, 7), (13, 0)] frns = 546, i = 70
[(7, 0), (11, 7), (13, 1)] frns = 469, i = 71
[(7, 0), (11, 7), (13, 2)] frns = 392, i = 72
[(7, 0), (11, 7), (13, 3)] frns = 315, i = 73
[(7, 0), (11, 7), (13, 4)] frns = 238, i = 74
[(7, 0), (11, 7), (13, 5)] frns = 161, i = 75
[(7, 0), (11, 7), (13, 6)] frns = 84, i = 76
[(7, 0), (11, 7), (13, 7)] frns = 7, i = 77
[(7, 0), (11, 7), (13, 8)] frns = 931, i = 78
[(7, 0), (11, 7), (13, 9)] frns = 854, i = 79
[(7, 0), (11, 8), (13, 0)] frns = 910, i = 80
[(7, 0), (11, 8), (13, 1)] frns = 833, i = 81
[(7, 0), (11, 8), (13, 2)] frns = 756, i = 82
[(7, 0), (11, 8), (13, 3)] frns = 679, i = 83
[(7, 0), (11, 8), (13, 4)] frns = 602, i = 84
[(7, 0), (11, 8), (13, 5)] frns = 525, i = 85
[(7, 0), (11, 8), (13, 6)] frns = 448, i = 86
[(7, 0), (11, 8), (13, 7)] frns = 371, i = 87
[(7, 0), (11, 8), (13, 8)] frns = 294, i = 88
[(7, 0), (11, 8), (13, 9)] frns = 217, i = 89
[(7, 0), (11, 9), (13, 0)] frns = 273, i = 90
[(7, 0), (11, 9), (13, 1)] frns = 196, i = 91
[(7, 0), (11, 9), (13, 2)] frns = 119, i = 92
[(7, 0), (11, 9), (13, 3)] frns = 42, i = 93
[(7, 0), (11, 9), (13, 4)] frns = 966, i = 94
[(7, 0), (11, 9), (13, 5)] frns = 889, i = 95
[(7, 0), (11, 9), (13, 6)] frns = 812, i = 96
[(7, 0), (11, 9), (13, 7)] frns = 735, i = 97
[(7, 0), (11, 9), (13, 8)] frns = 658, i = 98
[(7, 0), (11, 9), (13, 9)] frns = 581, i = 99
[(7, 1), (11, 0), (13, 0)] frns = 715, i = 100
[(7, 1), (11, 0), (13, 1)] frns = 638, i = 101
[(7, 1), (11, 0), (13, 2)] frns = 561, i = 102
[(7, 1), (11, 0), (13, 3)] frns = 484, i = 103
[(7, 1), (11, 0), (13, 4)] frns = 407, i = 104
[(7, 1), (11, 0), (13, 5)] frns = 330, i = 105
[(7, 1), (11, 0), (13, 6)] frns = 253, i = 106
[(7, 1), (11, 0), (13, 7)] frns = 176, i = 107
[(7, 1), (11, 0), (13, 8)] frns = 99, i = 108
[(7, 1), (11, 0), (13, 9)] frns = 22, i = 109
[(7, 1), (11, 1), (13, 0)] frns = 78, i = 110
[(7, 1), (11, 1), (13, 1)] frns = 1, i = 111
[(7, 1), (11, 1), (13, 2)] frns = 925, i = 112
[(7, 1), (11, 1), (13, 3)] frns = 848, i = 113
[(7, 1), (11, 1), (13, 4)] frns = 771, i = 114
[(7, 1), (11, 1), (13, 5)] frns = 694, i = 115
[(7, 1), (11, 1), (13, 6)] frns = 617, i = 116
[(7, 1), (11, 1), (13, 7)] frns = 540, i = 117
[(7, 1), (11, 1), (13, 8)] frns = 463, i = 118
[(7, 1), (11, 1), (13, 9)] frns = 386, i = 119
[(7, 1), (11, 2), (13, 0)] frns = 442, i = 120
[(7, 1), (11, 2), (13, 1)] frns = 365, i = 121
[(7, 1), (11, 2), (13, 2)] frns = 288, i = 122
[(7, 1), (11, 2), (13, 3)] frns = 211, i = 123
[(7, 1), (11, 2), (13, 4)] frns = 134, i = 124
[(7, 1), (11, 2), (13, 5)] frns = 57, i = 125
[(7, 1), (11, 2), (13, 6)] frns = 981, i = 126
[(7, 1), (11, 2), (13, 7)] frns = 904, i = 127
[(7, 1), (11, 2), (13, 8)] frns = 827, i = 128
[(7, 1), (11, 2), (13, 9)] frns = 750, i = 129
[(7, 1), (11, 3), (13, 0)] frns = 806, i = 130
[(7, 1), (11, 3), (13, 1)] frns = 729, i = 131
[(7, 1), (11, 3), (13, 2)] frns = 652, i = 132
[(7, 1), (11, 3), (13, 3)] frns = 575, i = 133
[(7, 1), (11, 3), (13, 4)] frns = 498, i = 134
[(7, 1), (11, 3), (13, 5)] frns = 421, i = 135
[(7, 1), (11, 3), (13, 6)] frns = 344, i = 136
[(7, 1), (11, 3), (13, 7)] frns = 267, i = 137
[(7, 1), (11, 3), (13, 8)] frns = 190, i = 138
[(7, 1), (11, 3), (13, 9)] frns = 113, i = 139
[(7, 1), (11, 4), (13, 0)] frns = 169, i = 140
[(7, 1), (11, 4), (13, 1)] frns = 92, i = 141
[(7, 1), (11, 4), (13, 2)] frns = 15, i = 142
[(7, 1), (11, 4), (13, 3)] frns = 939, i = 143
[(7, 1), (11, 4), (13, 4)] frns = 862, i = 144
[(7, 1), (11, 4), (13, 5)] frns = 785, i = 145
[(7, 1), (11, 4), (13, 6)] frns = 708, i = 146
[(7, 1), (11, 4), (13, 7)] frns = 631, i = 147
[(7, 1), (11, 4), (13, 8)] frns = 554, i = 148
[(7, 1), (11, 4), (13, 9)] frns = 477, i = 149
[(7, 1), (11, 5), (13, 0)] frns = 533, i = 150
[(7, 1), (11, 5), (13, 1)] frns = 456, i = 151
[(7, 1), (11, 5), (13, 2)] frns = 379, i = 152
[(7, 1), (11, 5), (13, 3)] frns = 302, i = 153
[(7, 1), (11, 5), (13, 4)] frns = 225, i = 154
[(7, 1), (11, 5), (13, 5)] frns = 148, i = 155
[(7, 1), (11, 5), (13, 6)] frns = 71, i = 156
[(7, 1), (11, 5), (13, 7)] frns = 995, i = 157
[(7, 1), (11, 5), (13, 8)] frns = 918, i = 158
[(7, 1), (11, 5), (13, 9)] frns = 841, i = 159
[(7, 1), (11, 6), (13, 0)] frns = 897, i = 160
[(7, 1), (11, 6), (13, 1)] frns = 820, i = 161
[(7, 1), (11, 6), (13, 2)] frns = 743, i = 162
[(7, 1), (11, 6), (13, 3)] frns = 666, i = 163
[(7, 1), (11, 6), (13, 4)] frns = 589, i = 164
[(7, 1), (11, 6), (13, 5)] frns = 512, i = 165
[(7, 1), (11, 6), (13, 6)] frns = 435, i = 166
[(7, 1), (11, 6), (13, 7)] frns = 358, i = 167
[(7, 1), (11, 6), (13, 8)] frns = 281, i = 168
[(7, 1), (11, 6), (13, 9)] frns = 204, i = 169
[(7, 1), (11, 7), (13, 0)] frns = 260, i = 170
[(7, 1), (11, 7), (13, 1)] frns = 183, i = 171
[(7, 1), (11, 7), (13, 2)] frns = 106, i = 172
[(7, 1), (11, 7), (13, 3)] frns = 29, i = 173
[(7, 1), (11, 7), (13, 4)] frns = 953, i = 174
[(7, 1), (11, 7), (13, 5)] frns = 876, i = 175
[(7, 1), (11, 7), (13, 6)] frns = 799, i = 176
[(7, 1), (11, 7), (13, 7)] frns = 722, i = 177
[(7, 1), (11, 7), (13, 8)] frns = 645, i = 178
[(7, 1), (11, 7), (13, 9)] frns = 568, i = 179
[(7, 1), (11, 8), (13, 0)] frns = 624, i = 180
[(7, 1), (11, 8), (13, 1)] frns = 547, i = 181
[(7, 1), (11, 8), (13, 2)] frns = 470, i = 182
[(7, 1), (11, 8), (13, 3)] frns = 393, i = 183
[(7, 1), (11, 8), (13, 4)] frns = 316, i = 184
[(7, 1), (11, 8), (13, 5)] frns = 239, i = 185
[(7, 1), (11, 8), (13, 6)] frns = 162, i = 186
[(7, 1), (11, 8), (13, 7)] frns = 85, i = 187
[(7, 1), (11, 8), (13, 8)] frns = 8, i = 188
[(7, 1), (11, 8), (13, 9)] frns = 932, i = 189
[(7, 1), (11, 9), (13, 0)] frns = 988, i = 190
[(7, 1), (11, 9), (13, 1)] frns = 911, i = 191
[(7, 1), (11, 9), (13, 2)] frns = 834, i = 192
[(7, 1), (11, 9), (13, 3)] frns = 757, i = 193
[(7, 1), (11, 9), (13, 4)] frns = 680, i = 194
[(7, 1), (11, 9), (13, 5)] frns = 603, i = 195
[(7, 1), (11, 9), (13, 6)] frns = 526, i = 196
[(7, 1), (11, 9), (13, 7)] frns = 449, i = 197
[(7, 1), (11, 9), (13, 8)] frns = 372, i = 198
[(7, 1), (11, 9), (13, 9)] frns = 295, i = 199
[(7, 2), (11, 0), (13, 0)] frns = 429, i = 200
[(7, 2), (11, 0), (13, 1)] frns = 352, i = 201
[(7, 2), (11, 0), (13, 2)] frns = 275, i = 202
[(7, 2), (11, 0), (13, 3)] frns = 198, i = 203
[(7, 2), (11, 0), (13, 4)] frns = 121, i = 204
[(7, 2), (11, 0), (13, 5)] frns = 44, i = 205
[(7, 2), (11, 0), (13, 6)] frns = 968, i = 206
[(7, 2), (11, 0), (13, 7)] frns = 891, i = 207
[(7, 2), (11, 0), (13, 8)] frns = 814, i = 208
[(7, 2), (11, 0), (13, 9)] frns = 737, i = 209
[(7, 2), (11, 1), (13, 0)] frns = 793, i = 210
[(7, 2), (11, 1), (13, 1)] frns = 716, i = 211
[(7, 2), (11, 1), (13, 2)] frns = 639, i = 212
[(7, 2), (11, 1), (13, 3)] frns = 562, i = 213
[(7, 2), (11, 1), (13, 4)] frns = 485, i = 214
[(7, 2), (11, 1), (13, 5)] frns = 408, i = 215
[(7, 2), (11, 1), (13, 6)] frns = 331, i = 216
[(7, 2), (11, 1), (13, 7)] frns = 254, i = 217
[(7, 2), (11, 1), (13, 8)] frns = 177, i = 218
[(7, 2), (11, 1), (13, 9)] frns = 100, i = 219
[(7, 2), (11, 2), (13, 0)] frns = 156, i = 220
[(7, 2), (11, 2), (13, 1)] frns = 79, i = 221
[(7, 2), (11, 2), (13, 2)] frns = 2, i = 222
[(7, 2), (11, 2), (13, 3)] frns = 926, i = 223
[(7, 2), (11, 2), (13, 4)] frns = 849, i = 224
[(7, 2), (11, 2), (13, 5)] frns = 772, i = 225
[(7, 2), (11, 2), (13, 6)] frns = 695, i = 226
[(7, 2), (11, 2), (13, 7)] frns = 618, i = 227
[(7, 2), (11, 2), (13, 8)] frns = 541, i = 228
[(7, 2), (11, 2), (13, 9)] frns = 464, i = 229
[(7, 2), (11, 3), (13, 0)] frns = 520, i = 230
[(7, 2), (11, 3), (13, 1)] frns = 443, i = 231
[(7, 2), (11, 3), (13, 2)] frns = 366, i = 232
[(7, 2), (11, 3), (13, 3)] frns = 289, i = 233
[(7, 2), (11, 3), (13, 4)] frns = 212, i = 234
[(7, 2), (11, 3), (13, 5)] frns = 135, i = 235
[(7, 2), (11, 3), (13, 6)] frns = 58, i = 236
[(7, 2), (11, 3), (13, 7)] frns = 982, i = 237
[(7, 2), (11, 3), (13, 8)] frns = 905, i = 238
[(7, 2), (11, 3), (13, 9)] frns = 828, i = 239
[(7, 2), (11, 4), (13, 0)] frns = 884, i = 240
[(7, 2), (11, 4), (13, 1)] frns = 807, i = 241
[(7, 2), (11, 4), (13, 2)] frns = 730, i = 242
[(7, 2), (11, 4), (13, 3)] frns = 653, i = 243
[(7, 2), (11, 4), (13, 4)] frns = 576, i = 244
[(7, 2), (11, 4), (13, 5)] frns = 499, i = 245
[(7, 2), (11, 4), (13, 6)] frns = 422, i = 246
[(7, 2), (11, 4), (13, 7)] frns = 345, i = 247
[(7, 2), (11, 4), (13, 8)] frns = 268, i = 248
[(7, 2), (11, 4), (13, 9)] frns = 191, i = 249
[(7, 2), (11, 5), (13, 0)] frns = 247, i = 250
[(7, 2), (11, 5), (13, 1)] frns = 170, i = 251
[(7, 2), (11, 5), (13, 2)] frns = 93, i = 252
[(7, 2), (11, 5), (13, 3)] frns = 16, i = 253
[(7, 2), (11, 5), (13, 4)] frns = 940, i = 254
[(7, 2), (11, 5), (13, 5)] frns = 863, i = 255
[(7, 2), (11, 5), (13, 6)] frns = 786, i = 256
[(7, 2), (11, 5), (13, 7)] frns = 709, i = 257
[(7, 2), (11, 5), (13, 8)] frns = 632, i = 258
[(7, 2), (11, 5), (13, 9)] frns = 555, i = 259
[(7, 2), (11, 6), (13, 0)] frns = 611, i = 260
[(7, 2), (11, 6), (13, 1)] frns = 534, i = 261
[(7, 2), (11, 6), (13, 2)] frns = 457, i = 262
[(7, 2), (11, 6), (13, 3)] frns = 380, i = 263
[(7, 2), (11, 6), (13, 4)] frns = 303, i = 264
[(7, 2), (11, 6), (13, 5)] frns = 226, i = 265
[(7, 2), (11, 6), (13, 6)] frns = 149, i = 266
[(7, 2), (11, 6), (13, 7)] frns = 72, i = 267
[(7, 2), (11, 6), (13, 8)] frns = 996, i = 268
[(7, 2), (11, 6), (13, 9)] frns = 919, i = 269
[(7, 2), (11, 7), (13, 0)] frns = 975, i = 270
[(7, 2), (11, 7), (13, 1)] frns = 898, i = 271
[(7, 2), (11, 7), (13, 2)] frns = 821, i = 272
[(7, 2), (11, 7), (13, 3)] frns = 744, i = 273
[(7, 2), (11, 7), (13, 4)] frns = 667, i = 274
[(7, 2), (11, 7), (13, 5)] frns = 590, i = 275
[(7, 2), (11, 7), (13, 6)] frns = 513, i = 276
[(7, 2), (11, 7), (13, 7)] frns = 436, i = 277
[(7, 2), (11, 7), (13, 8)] frns = 359, i = 278
[(7, 2), (11, 7), (13, 9)] frns = 282, i = 279
[(7, 2), (11, 8), (13, 0)] frns = 338, i = 280
[(7, 2), (11, 8), (13, 1)] frns = 261, i = 281
[(7, 2), (11, 8), (13, 2)] frns = 184, i = 282
[(7, 2), (11, 8), (13, 3)] frns = 107, i = 283
[(7, 2), (11, 8), (13, 4)] frns = 30, i = 284
[(7, 2), (11, 8), (13, 5)] frns = 954, i = 285
[(7, 2), (11, 8), (13, 6)] frns = 877, i = 286
[(7, 2), (11, 8), (13, 7)] frns = 800, i = 287
[(7, 2), (11, 8), (13, 8)] frns = 723, i = 288
[(7, 2), (11, 8), (13, 9)] frns = 646, i = 289
[(7, 2), (11, 9), (13, 0)] frns = 702, i = 290
[(7, 2), (11, 9), (13, 1)] frns = 625, i = 291
[(7, 2), (11, 9), (13, 2)] frns = 548, i = 292
[(7, 2), (11, 9), (13, 3)] frns = 471, i = 293
[(7, 2), (11, 9), (13, 4)] frns = 394, i = 294
[(7, 2), (11, 9), (13, 5)] frns = 317, i = 295
[(7, 2), (11, 9), (13, 6)] frns = 240, i = 296
[(7, 2), (11, 9), (13, 7)] frns = 163, i = 297
[(7, 2), (11, 9), (13, 8)] frns = 86, i = 298
[(7, 2), (11, 9), (13, 9)] frns = 9, i = 299
[(7, 3), (11, 0), (13, 0)] frns = 143, i = 300
[(7, 3), (11, 0), (13, 1)] frns = 66, i = 301
[(7, 3), (11, 0), (13, 2)] frns = 990, i = 302
[(7, 3), (11, 0), (13, 3)] frns = 913, i = 303
[(7, 3), (11, 0), (13, 4)] frns = 836, i = 304
[(7, 3), (11, 0), (13, 5)] frns = 759, i = 305
[(7, 3), (11, 0), (13, 6)] frns = 682, i = 306
[(7, 3), (11, 0), (13, 7)] frns = 605, i = 307
[(7, 3), (11, 0), (13, 8)] frns = 528, i = 308
[(7, 3), (11, 0), (13, 9)] frns = 451, i = 309
[(7, 3), (11, 1), (13, 0)] frns = 507, i = 310
[(7, 3), (11, 1), (13, 1)] frns = 430, i = 311
[(7, 3), (11, 1), (13, 2)] frns = 353, i = 312
[(7, 3), (11, 1), (13, 3)] frns = 276, i = 313
[(7, 3), (11, 1), (13, 4)] frns = 199, i = 314
[(7, 3), (11, 1), (13, 5)] frns = 122, i = 315
[(7, 3), (11, 1), (13, 6)] frns = 45, i = 316
[(7, 3), (11, 1), (13, 7)] frns = 969, i = 317
[(7, 3), (11, 1), (13, 8)] frns = 892, i = 318
[(7, 3), (11, 1), (13, 9)] frns = 815, i = 319
[(7, 3), (11, 2), (13, 0)] frns = 871, i = 320
[(7, 3), (11, 2), (13, 1)] frns = 794, i = 321
[(7, 3), (11, 2), (13, 2)] frns = 717, i = 322
[(7, 3), (11, 2), (13, 3)] frns = 640, i = 323
[(7, 3), (11, 2), (13, 4)] frns = 563, i = 324
[(7, 3), (11, 2), (13, 5)] frns = 486, i = 325
[(7, 3), (11, 2), (13, 6)] frns = 409, i = 326
[(7, 3), (11, 2), (13, 7)] frns = 332, i = 327
[(7, 3), (11, 2), (13, 8)] frns = 255, i = 328
[(7, 3), (11, 2), (13, 9)] frns = 178, i = 329
[(7, 3), (11, 3), (13, 0)] frns = 234, i = 330
[(7, 3), (11, 3), (13, 1)] frns = 157, i = 331
[(7, 3), (11, 3), (13, 2)] frns = 80, i = 332
[(7, 3), (11, 3), (13, 3)] frns = 3, i = 333
[(7, 3), (11, 3), (13, 4)] frns = 927, i = 334
[(7, 3), (11, 3), (13, 5)] frns = 850, i = 335
[(7, 3), (11, 3), (13, 6)] frns = 773, i = 336
[(7, 3), (11, 3), (13, 7)] frns = 696, i = 337
[(7, 3), (11, 3), (13, 8)] frns = 619, i = 338
[(7, 3), (11, 3), (13, 9)] frns = 542, i = 339
[(7, 3), (11, 4), (13, 0)] frns = 598, i = 340
[(7, 3), (11, 4), (13, 1)] frns = 521, i = 341
[(7, 3), (11, 4), (13, 2)] frns = 444, i = 342
[(7, 3), (11, 4), (13, 3)] frns = 367, i = 343
[(7, 3), (11, 4), (13, 4)] frns = 290, i = 344
[(7, 3), (11, 4), (13, 5)] frns = 213, i = 345
[(7, 3), (11, 4), (13, 6)] frns = 136, i = 346
[(7, 3), (11, 4), (13, 7)] frns = 59, i = 347
[(7, 3), (11, 4), (13, 8)] frns = 983, i = 348
[(7, 3), (11, 4), (13, 9)] frns = 906, i = 349
[(7, 3), (11, 5), (13, 0)] frns = 962, i = 350
[(7, 3), (11, 5), (13, 1)] frns = 885, i = 351
[(7, 3), (11, 5), (13, 2)] frns = 808, i = 352
[(7, 3), (11, 5), (13, 3)] frns = 731, i = 353
[(7, 3), (11, 5), (13, 4)] frns = 654, i = 354
[(7, 3), (11, 5), (13, 5)] frns = 577, i = 355
[(7, 3), (11, 5), (13, 6)] frns = 500, i = 356
[(7, 3), (11, 5), (13, 7)] frns = 423, i = 357
[(7, 3), (11, 5), (13, 8)] frns = 346, i = 358
[(7, 3), (11, 5), (13, 9)] frns = 269, i = 359
[(7, 3), (11, 6), (13, 0)] frns = 325, i = 360
[(7, 3), (11, 6), (13, 1)] frns = 248, i = 361
[(7, 3), (11, 6), (13, 2)] frns = 171, i = 362
[(7, 3), (11, 6), (13, 3)] frns = 94, i = 363
[(7, 3), (11, 6), (13, 4)] frns = 17, i = 364
[(7, 3), (11, 6), (13, 5)] frns = 941, i = 365
[(7, 3), (11, 6), (13, 6)] frns = 864, i = 366
[(7, 3), (11, 6), (13, 7)] frns = 787, i = 367
[(7, 3), (11, 6), (13, 8)] frns = 710, i = 368
[(7, 3), (11, 6), (13, 9)] frns = 633, i = 369
[(7, 3), (11, 7), (13, 0)] frns = 689, i = 370
[(7, 3), (11, 7), (13, 1)] frns = 612, i = 371
[(7, 3), (11, 7), (13, 2)] frns = 535, i = 372
[(7, 3), (11, 7), (13, 3)] frns = 458, i = 373
[(7, 3), (11, 7), (13, 4)] frns = 381, i = 374
[(7, 3), (11, 7), (13, 5)] frns = 304, i = 375
[(7, 3), (11, 7), (13, 6)] frns = 227, i = 376
[(7, 3), (11, 7), (13, 7)] frns = 150, i = 377
[(7, 3), (11, 7), (13, 8)] frns = 73, i = 378
[(7, 3), (11, 7), (13, 9)] frns = 997, i = 379
[(7, 3), (11, 8), (13, 0)] frns = 52, i = 380
[(7, 3), (11, 8), (13, 1)] frns = 976, i = 381
[(7, 3), (11, 8), (13, 2)] frns = 899, i = 382
[(7, 3), (11, 8), (13, 3)] frns = 822, i = 383
[(7, 3), (11, 8), (13, 4)] frns = 745, i = 384
[(7, 3), (11, 8), (13, 5)] frns = 668, i = 385
[(7, 3), (11, 8), (13, 6)] frns = 591, i = 386
[(7, 3), (11, 8), (13, 7)] frns = 514, i = 387
[(7, 3), (11, 8), (13, 8)] frns = 437, i = 388
[(7, 3), (11, 8), (13, 9)] frns = 360, i = 389
[(7, 3), (11, 9), (13, 0)] frns = 416, i = 390
[(7, 3), (11, 9), (13, 1)] frns = 339, i = 391
[(7, 3), (11, 9), (13, 2)] frns = 262, i = 392
[(7, 3), (11, 9), (13, 3)] frns = 185, i = 393
[(7, 3), (11, 9), (13, 4)] frns = 108, i = 394
[(7, 3), (11, 9), (13, 5)] frns = 31, i = 395
[(7, 3), (11, 9), (13, 6)] frns = 955, i = 396
[(7, 3), (11, 9), (13, 7)] frns = 878, i = 397
[(7, 3), (11, 9), (13, 8)] frns = 801, i = 398
[(7, 3), (11, 9), (13, 9)] frns = 724, i = 399
[(7, 4), (11, 0), (13, 0)] frns = 858, i = 400
[(7, 4), (11, 0), (13, 1)] frns = 781, i = 401
[(7, 4), (11, 0), (13, 2)] frns = 704, i = 402
[(7, 4), (11, 0), (13, 3)] frns = 627, i = 403
[(7, 4), (11, 0), (13, 4)] frns = 550, i = 404
[(7, 4), (11, 0), (13, 5)] frns = 473, i = 405
[(7, 4), (11, 0), (13, 6)] frns = 396, i = 406
[(7, 4), (11, 0), (13, 7)] frns = 319, i = 407
[(7, 4), (11, 0), (13, 8)] frns = 242, i = 408
[(7, 4), (11, 0), (13, 9)] frns = 165, i = 409
[(7, 4), (11, 1), (13, 0)] frns = 221, i = 410
[(7, 4), (11, 1), (13, 1)] frns = 144, i = 411
[(7, 4), (11, 1), (13, 2)] frns = 67, i = 412
[(7, 4), (11, 1), (13, 3)] frns = 991, i = 413
[(7, 4), (11, 1), (13, 4)] frns = 914, i = 414
[(7, 4), (11, 1), (13, 5)] frns = 837, i = 415
[(7, 4), (11, 1), (13, 6)] frns = 760, i = 416
[(7, 4), (11, 1), (13, 7)] frns = 683, i = 417
[(7, 4), (11, 1), (13, 8)] frns = 606, i = 418
[(7, 4), (11, 1), (13, 9)] frns = 529, i = 419
[(7, 4), (11, 2), (13, 0)] frns = 585, i = 420
[(7, 4), (11, 2), (13, 1)] frns = 508, i = 421
[(7, 4), (11, 2), (13, 2)] frns = 431, i = 422
[(7, 4), (11, 2), (13, 3)] frns = 354, i = 423
[(7, 4), (11, 2), (13, 4)] frns = 277, i = 424
[(7, 4), (11, 2), (13, 5)] frns = 200, i = 425
[(7, 4), (11, 2), (13, 6)] frns = 123, i = 426
[(7, 4), (11, 2), (13, 7)] frns = 46, i = 427
[(7, 4), (11, 2), (13, 8)] frns = 970, i = 428
[(7, 4), (11, 2), (13, 9)] frns = 893, i = 429
[(7, 4), (11, 3), (13, 0)] frns = 949, i = 430
[(7, 4), (11, 3), (13, 1)] frns = 872, i = 431
[(7, 4), (11, 3), (13, 2)] frns = 795, i = 432
[(7, 4), (11, 3), (13, 3)] frns = 718, i = 433
[(7, 4), (11, 3), (13, 4)] frns = 641, i = 434
[(7, 4), (11, 3), (13, 5)] frns = 564, i = 435
[(7, 4), (11, 3), (13, 6)] frns = 487, i = 436
[(7, 4), (11, 3), (13, 7)] frns = 410, i = 437
[(7, 4), (11, 3), (13, 8)] frns = 333, i = 438
[(7, 4), (11, 3), (13, 9)] frns = 256, i = 439
[(7, 4), (11, 4), (13, 0)] frns = 312, i = 440
[(7, 4), (11, 4), (13, 1)] frns = 235, i = 441
[(7, 4), (11, 4), (13, 2)] frns = 158, i = 442
[(7, 4), (11, 4), (13, 3)] frns = 81, i = 443
[(7, 4), (11, 4), (13, 4)] frns = 4, i = 444
[(7, 4), (11, 4), (13, 5)] frns = 928, i = 445
[(7, 4), (11, 4), (13, 6)] frns = 851, i = 446
[(7, 4), (11, 4), (13, 7)] frns = 774, i = 447
[(7, 4), (11, 4), (13, 8)] frns = 697, i = 448
[(7, 4), (11, 4), (13, 9)] frns = 620, i = 449
[(7, 4), (11, 5), (13, 0)] frns = 676, i = 450
[(7, 4), (11, 5), (13, 1)] frns = 599, i = 451
[(7, 4), (11, 5), (13, 2)] frns = 522, i = 452
[(7, 4), (11, 5), (13, 3)] frns = 445, i = 453
[(7, 4), (11, 5), (13, 4)] frns = 368, i = 454
[(7, 4), (11, 5), (13, 5)] frns = 291, i = 455
[(7, 4), (11, 5), (13, 6)] frns = 214, i = 456
[(7, 4), (11, 5), (13, 7)] frns = 137, i = 457
[(7, 4), (11, 5), (13, 8)] frns = 60, i = 458
[(7, 4), (11, 5), (13, 9)] frns = 984, i = 459
[(7, 4), (11, 6), (13, 0)] frns = 39, i = 460
[(7, 4), (11, 6), (13, 1)] frns = 963, i = 461
[(7, 4), (11, 6), (13, 2)] frns = 886, i = 462
[(7, 4), (11, 6), (13, 3)] frns = 809, i = 463
[(7, 4), (11, 6), (13, 4)] frns = 732, i = 464
[(7, 4), (11, 6), (13, 5)] frns = 655, i = 465
[(7, 4), (11, 6), (13, 6)] frns = 578, i = 466
[(7, 4), (11, 6), (13, 7)] frns = 501, i = 467
[(7, 4), (11, 6), (13, 8)] frns = 424, i = 468
[(7, 4), (11, 6), (13, 9)] frns = 347, i = 469
[(7, 4), (11, 7), (13, 0)] frns = 403, i = 470
[(7, 4), (11, 7), (13, 1)] frns = 326, i = 471
[(7, 4), (11, 7), (13, 2)] frns = 249, i = 472
[(7, 4), (11, 7), (13, 3)] frns = 172, i = 473
[(7, 4), (11, 7), (13, 4)] frns = 95, i = 474
[(7, 4), (11, 7), (13, 5)] frns = 18, i = 475
[(7, 4), (11, 7), (13, 6)] frns = 942, i = 476
[(7, 4), (11, 7), (13, 7)] frns = 865, i = 477
[(7, 4), (11, 7), (13, 8)] frns = 788, i = 478
[(7, 4), (11, 7), (13, 9)] frns = 711, i = 479
[(7, 4), (11, 8), (13, 0)] frns = 767, i = 480
[(7, 4), (11, 8), (13, 1)] frns = 690, i = 481
[(7, 4), (11, 8), (13, 2)] frns = 613, i = 482
[(7, 4), (11, 8), (13, 3)] frns = 536, i = 483
[(7, 4), (11, 8), (13, 4)] frns = 459, i = 484
[(7, 4), (11, 8), (13, 5)] frns = 382, i = 485
[(7, 4), (11, 8), (13, 6)] frns = 305, i = 486
[(7, 4), (11, 8), (13, 7)] frns = 228, i = 487
[(7, 4), (11, 8), (13, 8)] frns = 151, i = 488
[(7, 4), (11, 8), (13, 9)] frns = 74, i = 489
[(7, 4), (11, 9), (13, 0)] frns = 130, i = 490
[(7, 4), (11, 9), (13, 1)] frns = 53, i = 491
[(7, 4), (11, 9), (13, 2)] frns = 977, i = 492
[(7, 4), (11, 9), (13, 3)] frns = 900, i = 493
[(7, 4), (11, 9), (13, 4)] frns = 823, i = 494
[(7, 4), (11, 9), (13, 5)] frns = 746, i = 495
[(7, 4), (11, 9), (13, 6)] frns = 669, i = 496
[(7, 4), (11, 9), (13, 7)] frns = 592, i = 497
[(7, 4), (11, 9), (13, 8)] frns = 515, i = 498
[(7, 4), (11, 9), (13, 9)] frns = 438, i = 499
[(7, 5), (11, 0), (13, 0)] frns = 572, i = 500
[(7, 5), (11, 0), (13, 1)] frns = 495, i = 501
[(7, 5), (11, 0), (13, 2)] frns = 418, i = 502
[(7, 5), (11, 0), (13, 3)] frns = 341, i = 503
[(7, 5), (11, 0), (13, 4)] frns = 264, i = 504
[(7, 5), (11, 0), (13, 5)] frns = 187, i = 505
[(7, 5), (11, 0), (13, 6)] frns = 110, i = 506
[(7, 5), (11, 0), (13, 7)] frns = 33, i = 507
[(7, 5), (11, 0), (13, 8)] frns = 957, i = 508
[(7, 5), (11, 0), (13, 9)] frns = 880, i = 509
[(7, 5), (11, 1), (13, 0)] frns = 936, i = 510
[(7, 5), (11, 1), (13, 1)] frns = 859, i = 511
[(7, 5), (11, 1), (13, 2)] frns = 782, i = 512
[(7, 5), (11, 1), (13, 3)] frns = 705, i = 513
[(7, 5), (11, 1), (13, 4)] frns = 628, i = 514
[(7, 5), (11, 1), (13, 5)] frns = 551, i = 515
[(7, 5), (11, 1), (13, 6)] frns = 474, i = 516
[(7, 5), (11, 1), (13, 7)] frns = 397, i = 517
[(7, 5), (11, 1), (13, 8)] frns = 320, i = 518
[(7, 5), (11, 1), (13, 9)] frns = 243, i = 519
[(7, 5), (11, 2), (13, 0)] frns = 299, i = 520
[(7, 5), (11, 2), (13, 1)] frns = 222, i = 521
[(7, 5), (11, 2), (13, 2)] frns = 145, i = 522
[(7, 5), (11, 2), (13, 3)] frns = 68, i = 523
[(7, 5), (11, 2), (13, 4)] frns = 992, i = 524
[(7, 5), (11, 2), (13, 5)] frns = 915, i = 525
[(7, 5), (11, 2), (13, 6)] frns = 838, i = 526
[(7, 5), (11, 2), (13, 7)] frns = 761, i = 527
[(7, 5), (11, 2), (13, 8)] frns = 684, i = 528
[(7, 5), (11, 2), (13, 9)] frns = 607, i = 529
[(7, 5), (11, 3), (13, 0)] frns = 663, i = 530
[(7, 5), (11, 3), (13, 1)] frns = 586, i = 531
[(7, 5), (11, 3), (13, 2)] frns = 509, i = 532
[(7, 5), (11, 3), (13, 3)] frns = 432, i = 533
[(7, 5), (11, 3), (13, 4)] frns = 355, i = 534
[(7, 5), (11, 3), (13, 5)] frns = 278, i = 535
[(7, 5), (11, 3), (13, 6)] frns = 201, i = 536
[(7, 5), (11, 3), (13, 7)] frns = 124, i = 537
[(7, 5), (11, 3), (13, 8)] frns = 47, i = 538
[(7, 5), (11, 3), (13, 9)] frns = 971, i = 539
[(7, 5), (11, 4), (13, 0)] frns = 26, i = 540
[(7, 5), (11, 4), (13, 1)] frns = 950, i = 541
[(7, 5), (11, 4), (13, 2)] frns = 873, i = 542
[(7, 5), (11, 4), (13, 3)] frns = 796, i = 543
[(7, 5), (11, 4), (13, 4)] frns = 719, i = 544
[(7, 5), (11, 4), (13, 5)] frns = 642, i = 545
[(7, 5), (11, 4), (13, 6)] frns = 565, i = 546
[(7, 5), (11, 4), (13, 7)] frns = 488, i = 547
[(7, 5), (11, 4), (13, 8)] frns = 411, i = 548
[(7, 5), (11, 4), (13, 9)] frns = 334, i = 549
[(7, 5), (11, 5), (13, 0)] frns = 390, i = 550
[(7, 5), (11, 5), (13, 1)] frns = 313, i = 551
[(7, 5), (11, 5), (13, 2)] frns = 236, i = 552
[(7, 5), (11, 5), (13, 3)] frns = 159, i = 553
[(7, 5), (11, 5), (13, 4)] frns = 82, i = 554
[(7, 5), (11, 5), (13, 5)] frns = 5, i = 555
[(7, 5), (11, 5), (13, 6)] frns = 929, i = 556
[(7, 5), (11, 5), (13, 7)] frns = 852, i = 557
[(7, 5), (11, 5), (13, 8)] frns = 775, i = 558
[(7, 5), (11, 5), (13, 9)] frns = 698, i = 559
[(7, 5), (11, 6), (13, 0)] frns = 754, i = 560
[(7, 5), (11, 6), (13, 1)] frns = 677, i = 561
[(7, 5), (11, 6), (13, 2)] frns = 600, i = 562
[(7, 5), (11, 6), (13, 3)] frns = 523, i = 563
[(7, 5), (11, 6), (13, 4)] frns = 446, i = 564
[(7, 5), (11, 6), (13, 5)] frns = 369, i = 565
[(7, 5), (11, 6), (13, 6)] frns = 292, i = 566
[(7, 5), (11, 6), (13, 7)] frns = 215, i = 567
[(7, 5), (11, 6), (13, 8)] frns = 138, i = 568
[(7, 5), (11, 6), (13, 9)] frns = 61, i = 569
[(7, 5), (11, 7), (13, 0)] frns = 117, i = 570
[(7, 5), (11, 7), (13, 1)] frns = 40, i = 571
[(7, 5), (11, 7), (13, 2)] frns = 964, i = 572
[(7, 5), (11, 7), (13, 3)] frns = 887, i = 573
[(7, 5), (11, 7), (13, 4)] frns = 810, i = 574
[(7, 5), (11, 7), (13, 5)] frns = 733, i = 575
[(7, 5), (11, 7), (13, 6)] frns = 656, i = 576
[(7, 5), (11, 7), (13, 7)] frns = 579, i = 577
[(7, 5), (11, 7), (13, 8)] frns = 502, i = 578
[(7, 5), (11, 7), (13, 9)] frns = 425, i = 579
[(7, 5), (11, 8), (13, 0)] frns = 481, i = 580
[(7, 5), (11, 8), (13, 1)] frns = 404, i = 581
[(7, 5), (11, 8), (13, 2)] frns = 327, i = 582
[(7, 5), (11, 8), (13, 3)] frns = 250, i = 583
[(7, 5), (11, 8), (13, 4)] frns = 173, i = 584
[(7, 5), (11, 8), (13, 5)] frns = 96, i = 585
[(7, 5), (11, 8), (13, 6)] frns = 19, i = 586
[(7, 5), (11, 8), (13, 7)] frns = 943, i = 587
[(7, 5), (11, 8), (13, 8)] frns = 866, i = 588
[(7, 5), (11, 8), (13, 9)] frns = 789, i = 589
[(7, 5), (11, 9), (13, 0)] frns = 845, i = 590
[(7, 5), (11, 9), (13, 1)] frns = 768, i = 591
[(7, 5), (11, 9), (13, 2)] frns = 691, i = 592
[(7, 5), (11, 9), (13, 3)] frns = 614, i = 593
[(7, 5), (11, 9), (13, 4)] frns = 537, i = 594
[(7, 5), (11, 9), (13, 5)] frns = 460, i = 595
[(7, 5), (11, 9), (13, 6)] frns = 383, i = 596
[(7, 5), (11, 9), (13, 7)] frns = 306, i = 597
[(7, 5), (11, 9), (13, 8)] frns = 229, i = 598
[(7, 5), (11, 9), (13, 9)] frns = 152, i = 599
[(7, 6), (11, 0), (13, 0)] frns = 286, i = 600
[(7, 6), (11, 0), (13, 1)] frns = 209, i = 601
[(7, 6), (11, 0), (13, 2)] frns = 132, i = 602
[(7, 6), (11, 0), (13, 3)] frns = 55, i = 603
[(7, 6), (11, 0), (13, 4)] frns = 979, i = 604
[(7, 6), (11, 0), (13, 5)] frns = 902, i = 605
[(7, 6), (11, 0), (13, 6)] frns = 825, i = 606
[(7, 6), (11, 0), (13, 7)] frns = 748, i = 607
[(7, 6), (11, 0), (13, 8)] frns = 671, i = 608
[(7, 6), (11, 0), (13, 9)] frns = 594, i = 609
[(7, 6), (11, 1), (13, 0)] frns = 650, i = 610
[(7, 6), (11, 1), (13, 1)] frns = 573, i = 611
[(7, 6), (11, 1), (13, 2)] frns = 496, i = 612
[(7, 6), (11, 1), (13, 3)] frns = 419, i = 613
[(7, 6), (11, 1), (13, 4)] frns = 342, i = 614
[(7, 6), (11, 1), (13, 5)] frns = 265, i = 615
[(7, 6), (11, 1), (13, 6)] frns = 188, i = 616
[(7, 6), (11, 1), (13, 7)] frns = 111, i = 617
[(7, 6), (11, 1), (13, 8)] frns = 34, i = 618
[(7, 6), (11, 1), (13, 9)] frns = 958, i = 619
[(7, 6), (11, 2), (13, 0)] frns = 13, i = 620
[(7, 6), (11, 2), (13, 1)] frns = 937, i = 621
[(7, 6), (11, 2), (13, 2)] frns = 860, i = 622
[(7, 6), (11, 2), (13, 3)] frns = 783, i = 623
[(7, 6), (11, 2), (13, 4)] frns = 706, i = 624
[(7, 6), (11, 2), (13, 5)] frns = 629, i = 625
[(7, 6), (11, 2), (13, 6)] frns = 552, i = 626
[(7, 6), (11, 2), (13, 7)] frns = 475, i = 627
[(7, 6), (11, 2), (13, 8)] frns = 398, i = 628
[(7, 6), (11, 2), (13, 9)] frns = 321, i = 629
[(7, 6), (11, 3), (13, 0)] frns = 377, i = 630
[(7, 6), (11, 3), (13, 1)] frns = 300, i = 631
[(7, 6), (11, 3), (13, 2)] frns = 223, i = 632
[(7, 6), (11, 3), (13, 3)] frns = 146, i = 633
[(7, 6), (11, 3), (13, 4)] frns = 69, i = 634
[(7, 6), (11, 3), (13, 5)] frns = 993, i = 635
[(7, 6), (11, 3), (13, 6)] frns = 916, i = 636
[(7, 6), (11, 3), (13, 7)] frns = 839, i = 637
[(7, 6), (11, 3), (13, 8)] frns = 762, i = 638
[(7, 6), (11, 3), (13, 9)] frns = 685, i = 639
[(7, 6), (11, 4), (13, 0)] frns = 741, i = 640
[(7, 6), (11, 4), (13, 1)] frns = 664, i = 641
[(7, 6), (11, 4), (13, 2)] frns = 587, i = 642
[(7, 6), (11, 4), (13, 3)] frns = 510, i = 643
[(7, 6), (11, 4), (13, 4)] frns = 433, i = 644
[(7, 6), (11, 4), (13, 5)] frns = 356, i = 645
[(7, 6), (11, 4), (13, 6)] frns = 279, i = 646
[(7, 6), (11, 4), (13, 7)] frns = 202, i = 647
[(7, 6), (11, 4), (13, 8)] frns = 125, i = 648
[(7, 6), (11, 4), (13, 9)] frns = 48, i = 649
[(7, 6), (11, 5), (13, 0)] frns = 104, i = 650
[(7, 6), (11, 5), (13, 1)] frns = 27, i = 651
[(7, 6), (11, 5), (13, 2)] frns = 951, i = 652
[(7, 6), (11, 5), (13, 3)] frns = 874, i = 653
[(7, 6), (11, 5), (13, 4)] frns = 797, i = 654
[(7, 6), (11, 5), (13, 5)] frns = 720, i = 655
[(7, 6), (11, 5), (13, 6)] frns = 643, i = 656
[(7, 6), (11, 5), (13, 7)] frns = 566, i = 657
[(7, 6), (11, 5), (13, 8)] frns = 489, i = 658
[(7, 6), (11, 5), (13, 9)] frns = 412, i = 659
[(7, 6), (11, 6), (13, 0)] frns = 468, i = 660
[(7, 6), (11, 6), (13, 1)] frns = 391, i = 661
[(7, 6), (11, 6), (13, 2)] frns = 314, i = 662
[(7, 6), (11, 6), (13, 3)] frns = 237, i = 663
[(7, 6), (11, 6), (13, 4)] frns = 160, i = 664
[(7, 6), (11, 6), (13, 5)] frns = 83, i = 665
[(7, 6), (11, 6), (13, 6)] frns = 6, i = 666
[(7, 6), (11, 6), (13, 7)] frns = 930, i = 667
[(7, 6), (11, 6), (13, 8)] frns = 853, i = 668
[(7, 6), (11, 6), (13, 9)] frns = 776, i = 669
[(7, 6), (11, 7), (13, 0)] frns = 832, i = 670
[(7, 6), (11, 7), (13, 1)] frns = 755, i = 671
[(7, 6), (11, 7), (13, 2)] frns = 678, i = 672
[(7, 6), (11, 7), (13, 3)] frns = 601, i = 673
[(7, 6), (11, 7), (13, 4)] frns = 524, i = 674
[(7, 6), (11, 7), (13, 5)] frns = 447, i = 675
[(7, 6), (11, 7), (13, 6)] frns = 370, i = 676
[(7, 6), (11, 7), (13, 7)] frns = 293, i = 677
[(7, 6), (11, 7), (13, 8)] frns = 216, i = 678
[(7, 6), (11, 7), (13, 9)] frns = 139, i = 679
[(7, 6), (11, 8), (13, 0)] frns = 195, i = 680
[(7, 6), (11, 8), (13, 1)] frns = 118, i = 681
[(7, 6), (11, 8), (13, 2)] frns = 41, i = 682
[(7, 6), (11, 8), (13, 3)] frns = 965, i = 683
[(7, 6), (11, 8), (13, 4)] frns = 888, i = 684
[(7, 6), (11, 8), (13, 5)] frns = 811, i = 685
[(7, 6), (11, 8), (13, 6)] frns = 734, i = 686
[(7, 6), (11, 8), (13, 7)] frns = 657, i = 687
[(7, 6), (11, 8), (13, 8)] frns = 580, i = 688
[(7, 6), (11, 8), (13, 9)] frns = 503, i = 689
[(7, 6), (11, 9), (13, 0)] frns = 559, i = 690
[(7, 6), (11, 9), (13, 1)] frns = 482, i = 691
[(7, 6), (11, 9), (13, 2)] frns = 405, i = 692
[(7, 6), (11, 9), (13, 3)] frns = 328, i = 693
[(7, 6), (11, 9), (13, 4)] frns = 251, i = 694
[(7, 6), (11, 9), (13, 5)] frns = 174, i = 695
[(7, 6), (11, 9), (13, 6)] frns = 97, i = 696
[(7, 6), (11, 9), (13, 7)] frns = 20, i = 697
[(7, 6), (11, 9), (13, 8)] frns = 944, i = 698
[(7, 6), (11, 9), (13, 9)] frns = 867, i = 699
[(7, 7), (11, 0), (13, 0)] frns = 0, i = 700
[(7, 7), (11, 0), (13, 1)] frns = 924, i = 701
[(7, 7), (11, 0), (13, 2)] frns = 847, i = 702
[(7, 7), (11, 0), (13, 3)] frns = 770, i = 703
[(7, 7), (11, 0), (13, 4)] frns = 693, i = 704
[(7, 7), (11, 0), (13, 5)] frns = 616, i = 705
[(7, 7), (11, 0), (13, 6)] frns = 539, i = 706
[(7, 7), (11, 0), (13, 7)] frns = 462, i = 707
[(7, 7), (11, 0), (13, 8)] frns = 385, i = 708
[(7, 7), (11, 0), (13, 9)] frns = 308, i = 709
[(7, 7), (11, 1), (13, 0)] frns = 364, i = 710
[(7, 7), (11, 1), (13, 1)] frns = 287, i = 711
[(7, 7), (11, 1), (13, 2)] frns = 210, i = 712
[(7, 7), (11, 1), (13, 3)] frns = 133, i = 713
[(7, 7), (11, 1), (13, 4)] frns = 56, i = 714
[(7, 7), (11, 1), (13, 5)] frns = 980, i = 715
[(7, 7), (11, 1), (13, 6)] frns = 903, i = 716
[(7, 7), (11, 1), (13, 7)] frns = 826, i = 717
[(7, 7), (11, 1), (13, 8)] frns = 749, i = 718
[(7, 7), (11, 1), (13, 9)] frns = 672, i = 719
[(7, 7), (11, 2), (13, 0)] frns = 728, i = 720
[(7, 7), (11, 2), (13, 1)] frns = 651, i = 721
[(7, 7), (11, 2), (13, 2)] frns = 574, i = 722
[(7, 7), (11, 2), (13, 3)] frns = 497, i = 723
[(7, 7), (11, 2), (13, 4)] frns = 420, i = 724
[(7, 7), (11, 2), (13, 5)] frns = 343, i = 725
[(7, 7), (11, 2), (13, 6)] frns = 266, i = 726
[(7, 7), (11, 2), (13, 7)] frns = 189, i = 727
[(7, 7), (11, 2), (13, 8)] frns = 112, i = 728
[(7, 7), (11, 2), (13, 9)] frns = 35, i = 729
[(7, 7), (11, 3), (13, 0)] frns = 91, i = 730
[(7, 7), (11, 3), (13, 1)] frns = 14, i = 731
[(7, 7), (11, 3), (13, 2)] frns = 938, i = 732
[(7, 7), (11, 3), (13, 3)] frns = 861, i = 733
[(7, 7), (11, 3), (13, 4)] frns = 784, i = 734
[(7, 7), (11, 3), (13, 5)] frns = 707, i = 735
[(7, 7), (11, 3), (13, 6)] frns = 630, i = 736
[(7, 7), (11, 3), (13, 7)] frns = 553, i = 737
[(7, 7), (11, 3), (13, 8)] frns = 476, i = 738
[(7, 7), (11, 3), (13, 9)] frns = 399, i = 739
[(7, 7), (11, 4), (13, 0)] frns = 455, i = 740
[(7, 7), (11, 4), (13, 1)] frns = 378, i = 741
[(7, 7), (11, 4), (13, 2)] frns = 301, i = 742
[(7, 7), (11, 4), (13, 3)] frns = 224, i = 743
[(7, 7), (11, 4), (13, 4)] frns = 147, i = 744
[(7, 7), (11, 4), (13, 5)] frns = 70, i = 745
[(7, 7), (11, 4), (13, 6)] frns = 994, i = 746
[(7, 7), (11, 4), (13, 7)] frns = 917, i = 747
[(7, 7), (11, 4), (13, 8)] frns = 840, i = 748
[(7, 7), (11, 4), (13, 9)] frns = 763, i = 749
[(7, 7), (11, 5), (13, 0)] frns = 819, i = 750
[(7, 7), (11, 5), (13, 1)] frns = 742, i = 751
[(7, 7), (11, 5), (13, 2)] frns = 665, i = 752
[(7, 7), (11, 5), (13, 3)] frns = 588, i = 753
[(7, 7), (11, 5), (13, 4)] frns = 511, i = 754
[(7, 7), (11, 5), (13, 5)] frns = 434, i = 755
[(7, 7), (11, 5), (13, 6)] frns = 357, i = 756
[(7, 7), (11, 5), (13, 7)] frns = 280, i = 757
[(7, 7), (11, 5), (13, 8)] frns = 203, i = 758
[(7, 7), (11, 5), (13, 9)] frns = 126, i = 759
[(7, 7), (11, 6), (13, 0)] frns = 182, i = 760
[(7, 7), (11, 6), (13, 1)] frns = 105, i = 761
[(7, 7), (11, 6), (13, 2)] frns = 28, i = 762
[(7, 7), (11, 6), (13, 3)] frns = 952, i = 763
[(7, 7), (11, 6), (13, 4)] frns = 875, i = 764
[(7, 7), (11, 6), (13, 5)] frns = 798, i = 765
[(7, 7), (11, 6), (13, 6)] frns = 721, i = 766
[(7, 7), (11, 6), (13, 7)] frns = 644, i = 767
[(7, 7), (11, 6), (13, 8)] frns = 567, i = 768
[(7, 7), (11, 6), (13, 9)] frns = 490, i = 769
[(7, 7), (11, 7), (13, 0)] frns = 546, i = 770
[(7, 7), (11, 7), (13, 1)] frns = 469, i = 771
[(7, 7), (11, 7), (13, 2)] frns = 392, i = 772
[(7, 7), (11, 7), (13, 3)] frns = 315, i = 773
[(7, 7), (11, 7), (13, 4)] frns = 238, i = 774
[(7, 7), (11, 7), (13, 5)] frns = 161, i = 775
[(7, 7), (11, 7), (13, 6)] frns = 84, i = 776
[(7, 7), (11, 7), (13, 7)] frns = 7, i = 777
[(7, 7), (11, 7), (13, 8)] frns = 931, i = 778
[(7, 7), (11, 7), (13, 9)] frns = 854, i = 779
[(7, 7), (11, 8), (13, 0)] frns = 910, i = 780
[(7, 7), (11, 8), (13, 1)] frns = 833, i = 781
[(7, 7), (11, 8), (13, 2)] frns = 756, i = 782
[(7, 7), (11, 8), (13, 3)] frns = 679, i = 783
[(7, 7), (11, 8), (13, 4)] frns = 602, i = 784
[(7, 7), (11, 8), (13, 5)] frns = 525, i = 785
[(7, 7), (11, 8), (13, 6)] frns = 448, i = 786
[(7, 7), (11, 8), (13, 7)] frns = 371, i = 787
[(7, 7), (11, 8), (13, 8)] frns = 294, i = 788
[(7, 7), (11, 8), (13, 9)] frns = 217, i = 789
[(7, 7), (11, 9), (13, 0)] frns = 273, i = 790
[(7, 7), (11, 9), (13, 1)] frns = 196, i = 791
[(7, 7), (11, 9), (13, 2)] frns = 119, i = 792
[(7, 7), (11, 9), (13, 3)] frns = 42, i = 793
[(7, 7), (11, 9), (13, 4)] frns = 966, i = 794
[(7, 7), (11, 9), (13, 5)] frns = 889, i = 795
[(7, 7), (11, 9), (13, 6)] frns = 812, i = 796
[(7, 7), (11, 9), (13, 7)] frns = 735, i = 797
[(7, 7), (11, 9), (13, 8)] frns = 658, i = 798
[(7, 7), (11, 9), (13, 9)] frns = 581, i = 799
[(7, 8), (11, 0), (13, 0)] frns = 715, i = 800
[(7, 8), (11, 0), (13, 1)] frns = 638, i = 801
[(7, 8), (11, 0), (13, 2)] frns = 561, i = 802
[(7, 8), (11, 0), (13, 3)] frns = 484, i = 803
[(7, 8), (11, 0), (13, 4)] frns = 407, i = 804
[(7, 8), (11, 0), (13, 5)] frns = 330, i = 805
[(7, 8), (11, 0), (13, 6)] frns = 253, i = 806
[(7, 8), (11, 0), (13, 7)] frns = 176, i = 807
[(7, 8), (11, 0), (13, 8)] frns = 99, i = 808
[(7, 8), (11, 0), (13, 9)] frns = 22, i = 809
[(7, 8), (11, 1), (13, 0)] frns = 78, i = 810
[(7, 8), (11, 1), (13, 1)] frns = 1, i = 811
[(7, 8), (11, 1), (13, 2)] frns = 925, i = 812
[(7, 8), (11, 1), (13, 3)] frns = 848, i = 813
[(7, 8), (11, 1), (13, 4)] frns = 771, i = 814
[(7, 8), (11, 1), (13, 5)] frns = 694, i = 815
[(7, 8), (11, 1), (13, 6)] frns = 617, i = 816
[(7, 8), (11, 1), (13, 7)] frns = 540, i = 817
[(7, 8), (11, 1), (13, 8)] frns = 463, i = 818
[(7, 8), (11, 1), (13, 9)] frns = 386, i = 819
[(7, 8), (11, 2), (13, 0)] frns = 442, i = 820
[(7, 8), (11, 2), (13, 1)] frns = 365, i = 821
[(7, 8), (11, 2), (13, 2)] frns = 288, i = 822
[(7, 8), (11, 2), (13, 3)] frns = 211, i = 823
[(7, 8), (11, 2), (13, 4)] frns = 134, i = 824
[(7, 8), (11, 2), (13, 5)] frns = 57, i = 825
[(7, 8), (11, 2), (13, 6)] frns = 981, i = 826
[(7, 8), (11, 2), (13, 7)] frns = 904, i = 827
[(7, 8), (11, 2), (13, 8)] frns = 827, i = 828
[(7, 8), (11, 2), (13, 9)] frns = 750, i = 829
[(7, 8), (11, 3), (13, 0)] frns = 806, i = 830
[(7, 8), (11, 3), (13, 1)] frns = 729, i = 831
[(7, 8), (11, 3), (13, 2)] frns = 652, i = 832
[(7, 8), (11, 3), (13, 3)] frns = 575, i = 833
[(7, 8), (11, 3), (13, 4)] frns = 498, i = 834
[(7, 8), (11, 3), (13, 5)] frns = 421, i = 835
[(7, 8), (11, 3), (13, 6)] frns = 344, i = 836
[(7, 8), (11, 3), (13, 7)] frns = 267, i = 837
[(7, 8), (11, 3), (13, 8)] frns = 190, i = 838
[(7, 8), (11, 3), (13, 9)] frns = 113, i = 839
[(7, 8), (11, 4), (13, 0)] frns = 169, i = 840
[(7, 8), (11, 4), (13, 1)] frns = 92, i = 841
[(7, 8), (11, 4), (13, 2)] frns = 15, i = 842
[(7, 8), (11, 4), (13, 3)] frns = 939, i = 843
[(7, 8), (11, 4), (13, 4)] frns = 862, i = 844
[(7, 8), (11, 4), (13, 5)] frns = 785, i = 845
[(7, 8), (11, 4), (13, 6)] frns = 708, i = 846
[(7, 8), (11, 4), (13, 7)] frns = 631, i = 847
[(7, 8), (11, 4), (13, 8)] frns = 554, i = 848
[(7, 8), (11, 4), (13, 9)] frns = 477, i = 849
[(7, 8), (11, 5), (13, 0)] frns = 533, i = 850
[(7, 8), (11, 5), (13, 1)] frns = 456, i = 851
[(7, 8), (11, 5), (13, 2)] frns = 379, i = 852
[(7, 8), (11, 5), (13, 3)] frns = 302, i = 853
[(7, 8), (11, 5), (13, 4)] frns = 225, i = 854
[(7, 8), (11, 5), (13, 5)] frns = 148, i = 855
[(7, 8), (11, 5), (13, 6)] frns = 71, i = 856
[(7, 8), (11, 5), (13, 7)] frns = 995, i = 857
[(7, 8), (11, 5), (13, 8)] frns = 918, i = 858
[(7, 8), (11, 5), (13, 9)] frns = 841, i = 859
[(7, 8), (11, 6), (13, 0)] frns = 897, i = 860
[(7, 8), (11, 6), (13, 1)] frns = 820, i = 861
[(7, 8), (11, 6), (13, 2)] frns = 743, i = 862
[(7, 8), (11, 6), (13, 3)] frns = 666, i = 863
[(7, 8), (11, 6), (13, 4)] frns = 589, i = 864
[(7, 8), (11, 6), (13, 5)] frns = 512, i = 865
[(7, 8), (11, 6), (13, 6)] frns = 435, i = 866
[(7, 8), (11, 6), (13, 7)] frns = 358, i = 867
[(7, 8), (11, 6), (13, 8)] frns = 281, i = 868
[(7, 8), (11, 6), (13, 9)] frns = 204, i = 869
[(7, 8), (11, 7), (13, 0)] frns = 260, i = 870
[(7, 8), (11, 7), (13, 1)] frns = 183, i = 871
[(7, 8), (11, 7), (13, 2)] frns = 106, i = 872
[(7, 8), (11, 7), (13, 3)] frns = 29, i = 873
[(7, 8), (11, 7), (13, 4)] frns = 953, i = 874
[(7, 8), (11, 7), (13, 5)] frns = 876, i = 875
[(7, 8), (11, 7), (13, 6)] frns = 799, i = 876
[(7, 8), (11, 7), (13, 7)] frns = 722, i = 877
[(7, 8), (11, 7), (13, 8)] frns = 645, i = 878
[(7, 8), (11, 7), (13, 9)] frns = 568, i = 879
[(7, 8), (11, 8), (13, 0)] frns = 624, i = 880
[(7, 8), (11, 8), (13, 1)] frns = 547, i = 881
[(7, 8), (11, 8), (13, 2)] frns = 470, i = 882
[(7, 8), (11, 8), (13, 3)] frns = 393, i = 883
[(7, 8), (11, 8), (13, 4)] frns = 316, i = 884
[(7, 8), (11, 8), (13, 5)] frns = 239, i = 885
[(7, 8), (11, 8), (13, 6)] frns = 162, i = 886
[(7, 8), (11, 8), (13, 7)] frns = 85, i = 887
[(7, 8), (11, 8), (13, 8)] frns = 8, i = 888
[(7, 8), (11, 8), (13, 9)] frns = 932, i = 889
[(7, 8), (11, 9), (13, 0)] frns = 988, i = 890
[(7, 8), (11, 9), (13, 1)] frns = 911, i = 891
[(7, 8), (11, 9), (13, 2)] frns = 834, i = 892
[(7, 8), (11, 9), (13, 3)] frns = 757, i = 893
[(7, 8), (11, 9), (13, 4)] frns = 680, i = 894
[(7, 8), (11, 9), (13, 5)] frns = 603, i = 895
[(7, 8), (11, 9), (13, 6)] frns = 526, i = 896
[(7, 8), (11, 9), (13, 7)] frns = 449, i = 897
[(7, 8), (11, 9), (13, 8)] frns = 372, i = 898
[(7, 8), (11, 9), (13, 9)] frns = 295, i = 899
[(7, 9), (11, 0), (13, 0)] frns = 429, i = 900
[(7, 9), (11, 0), (13, 1)] frns = 352, i = 901
[(7, 9), (11, 0), (13, 2)] frns = 275, i = 902
[(7, 9), (11, 0), (13, 3)] frns = 198, i = 903
[(7, 9), (11, 0), (13, 4)] frns = 121, i = 904
[(7, 9), (11, 0), (13, 5)] frns = 44, i = 905
[(7, 9), (11, 0), (13, 6)] frns = 968, i = 906
[(7, 9), (11, 0), (13, 7)] frns = 891, i = 907
[(7, 9), (11, 0), (13, 8)] frns = 814, i = 908
[(7, 9), (11, 0), (13, 9)] frns = 737, i = 909
[(7, 9), (11, 1), (13, 0)] frns = 793, i = 910
[(7, 9), (11, 1), (13, 1)] frns = 716, i = 911
[(7, 9), (11, 1), (13, 2)] frns = 639, i = 912
[(7, 9), (11, 1), (13, 3)] frns = 562, i = 913
[(7, 9), (11, 1), (13, 4)] frns = 485, i = 914
[(7, 9), (11, 1), (13, 5)] frns = 408, i = 915
[(7, 9), (11, 1), (13, 6)] frns = 331, i = 916
[(7, 9), (11, 1), (13, 7)] frns = 254, i = 917
[(7, 9), (11, 1), (13, 8)] frns = 177, i = 918
[(7, 9), (11, 1), (13, 9)] frns = 100, i = 919
[(7, 9), (11, 2), (13, 0)] frns = 156, i = 920
[(7, 9), (11, 2), (13, 1)] frns = 79, i = 921
[(7, 9), (11, 2), (13, 2)] frns = 2, i = 922
[(7, 9), (11, 2), (13, 3)] frns = 926, i = 923
[(7, 9), (11, 2), (13, 4)] frns = 849, i = 924
[(7, 9), (11, 2), (13, 5)] frns = 772, i = 925
[(7, 9), (11, 2), (13, 6)] frns = 695, i = 926
[(7, 9), (11, 2), (13, 7)] frns = 618, i = 927
[(7, 9), (11, 2), (13, 8)] frns = 541, i = 928
[(7, 9), (11, 2), (13, 9)] frns = 464, i = 929
[(7, 9), (11, 3), (13, 0)] frns = 520, i = 930
[(7, 9), (11, 3), (13, 1)] frns = 443, i = 931
[(7, 9), (11, 3), (13, 2)] frns = 366, i = 932
[(7, 9), (11, 3), (13, 3)] frns = 289, i = 933
[(7, 9), (11, 3), (13, 4)] frns = 212, i = 934
[(7, 9), (11, 3), (13, 5)] frns = 135, i = 935
[(7, 9), (11, 3), (13, 6)] frns = 58, i = 936
[(7, 9), (11, 3), (13, 7)] frns = 982, i = 937
[(7, 9), (11, 3), (13, 8)] frns = 905, i = 938
[(7, 9), (11, 3), (13, 9)] frns = 828, i = 939
[(7, 9), (11, 4), (13, 0)] frns = 884, i = 940
[(7, 9), (11, 4), (13, 1)] frns = 807, i = 941
[(7, 9), (11, 4), (13, 2)] frns = 730, i = 942
[(7, 9), (11, 4), (13, 3)] frns = 653, i = 943
[(7, 9), (11, 4), (13, 4)] frns = 576, i = 944
[(7, 9), (11, 4), (13, 5)] frns = 499, i = 945
[(7, 9), (11, 4), (13, 6)] frns = 422, i = 946
[(7, 9), (11, 4), (13, 7)] frns = 345, i = 947
[(7, 9), (11, 4), (13, 8)] frns = 268, i = 948
[(7, 9), (11, 4), (13, 9)] frns = 191, i = 949
[(7, 9), (11, 5), (13, 0)] frns = 247, i = 950
[(7, 9), (11, 5), (13, 1)] frns = 170, i = 951
[(7, 9), (11, 5), (13, 2)] frns = 93, i = 952
[(7, 9), (11, 5), (13, 3)] frns = 16, i = 953
[(7, 9), (11, 5), (13, 4)] frns = 940, i = 954
[(7, 9), (11, 5), (13, 5)] frns = 863, i = 955
[(7, 9), (11, 5), (13, 6)] frns = 786, i = 956
[(7, 9), (11, 5), (13, 7)] frns = 709, i = 957
[(7, 9), (11, 5), (13, 8)] frns = 632, i = 958
[(7, 9), (11, 5), (13, 9)] frns = 555, i = 959
[(7, 9), (11, 6), (13, 0)] frns = 611, i = 960
[(7, 9), (11, 6), (13, 1)] frns = 534, i = 961
[(7, 9), (11, 6), (13, 2)] frns = 457, i = 962
[(7, 9), (11, 6), (13, 3)] frns = 380, i = 963
[(7, 9), (11, 6), (13, 4)] frns = 303, i = 964
[(7, 9), (11, 6), (13, 5)] frns = 226, i = 965
[(7, 9), (11, 6), (13, 6)] frns = 149, i = 966
[(7, 9), (11, 6), (13, 7)] frns = 72, i = 967
[(7, 9), (11, 6), (13, 8)] frns = 996, i = 968
[(7, 9), (11, 6), (13, 9)] frns = 919, i = 969
[(7, 9), (11, 7), (13, 0)] frns = 975, i = 970
[(7, 9), (11, 7), (13, 1)] frns = 898, i = 971
[(7, 9), (11, 7), (13, 2)] frns = 821, i = 972
[(7, 9), (11, 7), (13, 3)] frns = 744, i = 973
[(7, 9), (11, 7), (13, 4)] frns = 667, i = 974
[(7, 9), (11, 7), (13, 5)] frns = 590, i = 975
[(7, 9), (11, 7), (13, 6)] frns = 513, i = 976
[(7, 9), (11, 7), (13, 7)] frns = 436, i = 977
[(7, 9), (11, 7), (13, 8)] frns = 359, i = 978
[(7, 9), (11, 7), (13, 9)] frns = 282, i = 979
[(7, 9), (11, 8), (13, 0)] frns = 338, i = 980
[(7, 9), (11, 8), (13, 1)] frns = 261, i = 981
[(7, 9), (11, 8), (13, 2)] frns = 184, i = 982
[(7, 9), (11, 8), (13, 3)] frns = 107, i = 983
[(7, 9), (11, 8), (13, 4)] frns = 30, i = 984
[(7, 9), (11, 8), (13, 5)] frns = 954, i = 985
[(7, 9), (11, 8), (13, 6)] frns = 877, i = 986
[(7, 9), (11, 8), (13, 7)] frns = 800, i = 987
[(7, 9), (11, 8), (13, 8)] frns = 723, i = 988
[(7, 9), (11, 8), (13, 9)] frns = 646, i = 989
[(7, 9), (11, 9), (13, 0)] frns = 702, i = 990
[(7, 9), (11, 9), (13, 1)] frns = 625, i = 991
[(7, 9), (11, 9), (13, 2)] frns = 548, i = 992
[(7, 9), (11, 9), (13, 3)] frns = 471, i = 993
[(7, 9), (11, 9), (13, 4)] frns = 394, i = 994
[(7, 9), (11, 9), (13, 5)] frns = 317, i = 995
[(7, 9), (11, 9), (13, 6)] frns = 240, i = 996
[(7, 9), (11, 9), (13, 7)] frns = 163, i = 997
[(7, 9), (11, 9), (13, 8)] frns = 86, i = 998
[(7, 9), (11, 9), (13, 9)] frns = 9, i = 999
[0]
#+end_example
#+BEGIN_info
The only three digit solution that is equal to the inputs is 000. There is no
other three digit combination with this property.
#+END_info

** DONE JPZ
   CLOSED: [2018-02-27 Tue 21:54]
   :LOGBOOK:
   CLOCK: [2018-02-27 Tue 20:46]--[2018-02-27 Tue 21:54] =>  1:08
   :END:
#+begin_note
  If p and q are coprime positive integers, then does a bijection necessarily
  exist between $\mathbb{Z}_{pq}$ and $\mathbb{Z}_{p} \times \mathbb{Z}_{q}$?

  Explain what the following code does, and how:
#+BEGIN_SRC emacs-lisp
  (let* ((p 3)
         (q 5)
         (z-pq (number-sequence 0 (* p q))))
      (mapcar* 'list z-pq
               (mapcar (lambda (n) (mod n p)) z-pq)
               (mapcar (lambda (n) (mod n q)) z-pq)))
#+END_SRC

#+RESULTS:
|  0 | 0 | 0 |
|  1 | 1 | 1 |
|  2 | 2 | 2 |
|  3 | 0 | 3 |
|  4 | 1 | 4 |
|  5 | 2 | 0 |
|  6 | 0 | 1 |
|  7 | 1 | 2 |
|  8 | 2 | 3 |
|  9 | 0 | 4 |
| 10 | 1 | 0 |
| 11 | 2 | 1 |
| 12 | 0 | 2 |
| 13 | 1 | 3 |
| 14 | 2 | 4 |
| 15 | 0 | 0 |

  Imagine the above code were wrapped in a function definition with p and q
  passed as parameters instead of bound in the =let=, then compare this function
  to the =mystery= function. Which function would be more in the functional
  programming style?
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
p,q = 3,5
plist,qlist = [n%p for n in range(0,p*q)],[n%q for n in range(0,p*q)]
for i in range(0,p*q): print("| {} | {} | {} |".format(i,plist[i],qlist[i]))
#+END_SRC

#+RESULTS:
#+begin_example
| 0 | 0 | 0 |
| 1 | 1 | 1 |
| 2 | 2 | 2 |
| 3 | 0 | 3 |
| 4 | 1 | 4 |
| 5 | 2 | 0 |
| 6 | 0 | 1 |
| 7 | 1 | 2 |
| 8 | 2 | 3 |
| 9 | 0 | 4 |
| 10 | 1 | 0 |
| 11 | 2 | 1 |
| 12 | 0 | 2 |
| 13 | 1 | 3 |
| 14 | 2 | 4 |
#+end_example

The mystery function and this function are exactly the same, but this method uses mapping.
This example uses functional programming, whereas the mystery function does not.
#+end_info
** DONE XFO
   CLOSED: [2018-03-01 Thu 22:59]
   :LOGBOOK:
   CLOCK: [2018-03-01 Thu 17:57]--[2018-03-01 Thu 22:59] =>  5:02
   CLOCK: [2018-02-28 Wed 23:33]--[2018-03-01 Thu 00:55] =>  1:22
   CLOCK: [2018-02-28 Wed 20:27]--[2018-02-28 Wed 22:15] =>  1:48
   CLOCK: [2018-02-27 Tue 21:54]--[2018-02-27 Tue 22:20] =>  0:26
   :END:
#+begin_note
  The Chinese Remainder Theorem makes possible the use of a /residue number
  system/ to do computer arithmetic with \ldquo{}large\rdquo integers, where largeness is
  relative. Large in practice means numbers with hundreds or thousands of
  digits. For this problem, large means no greater than 1000. Normally,
  arithmetic with numbers in this range would be trivial, but the normal
  arithmetic operations of addition, subtraction, and multiplication are to be
  viewed as quite expensive. You must find ways to avoid using them.
  Exponentially more expensive are the division and modulus operations --- avoid
  these especially!

  Use the code below as a guide and a starting point, finish implementing the
  =to-rns=, =from-rns=, =add2= and =mul2= functions, and then in separate code
  blocks, write test code that can correctly add and multiply one-, two-, and
  three-digit nonnegative integers, converting to rns, doing the rns operations,
  then converting back from rns.

  /Avoid at all costs/ the use of =+=, =-=, =*=, =/=, =%=, or =mod=!

  You will benefit greatly if you write helper functions and use good functional
  programming style throughout.

#+BEGIN_SRC emacs-lisp
  (defun to-rns (n)
    "Convert a normal integer between 0 and 1000 to its rns modulo
    1001 representation."
    )

  (defun from-rns (rns)
    "Convert from an rns modulo 1001 integer back to its normal
    representation."
    )

  (defun add2 (rns1 rns2)
    "Add two rns modulo 1001 integers to produce their rns sum."
    )

  (defun mul2 (rns1 rns2)
    "Multiply two rns modulo 1001 integers to produce their rns
    product."
    )
#+END_SRC

  The rest of the code is good as is. Note the mention in the documentation of
  the $\mathbb{Z}_7$, $\mathbb{Z}_{11}$, and $\mathbb{Z}_{13}$ residue sets. Recall
  that a $\mathbb{Z}_n$ residue set is just the possible remainders when modding
  by n, i.e., [0 1 2 3 \dots n-1].

#+BEGIN_SRC emacs-lisp
  (defun a7 (i j)
    "Add two nonnegative integers in the Z_7 residue set to produce
     a sum in that set. Error check to ensure the inputs are valid,
     and use table lookup instead of normal addition/mod."
    (unless (and (integerp i) (integerp j) (<= 0 i) (<= 0 j) (< i 7) (< j 7))
      (error "bad parameters %s and/or %s" i j))
    (aref (aref [[0 1 2 3 4 5 6]
                 [1 2 3 4 5 6 0]
                 [2 3 4 5 6 0 1]
                 [3 4 5 6 0 1 2]
                 [4 5 6 0 1 2 3]
                 [5 6 0 1 2 3 4]
                 [6 0 1 2 3 4 5]] i) j))

  (defun a11 (i j)
    "Add two nonnegative integers in the Z_11 residue set to produce
     a sum in that set. Error check to ensure the inputs are valid,
     and use table lookup instead of normal addition/mod."
    (unless (and (integerp i) (integerp j) (<= 0 i) (<= 0 j) (< i 11) (< j 11))
      (error "bad parameters %s and/or %s" i j))
    (aref (aref [[ 0  1  2  3  4  5  6  7  8  9 10]
                 [ 1  2  3  4  5  6  7  8  9 10  0]
                 [ 2  3  4  5  6  7  8  9 10  0  1]
                 [ 3  4  5  6  7  8  9 10  0  1  2]
                 [ 4  5  6  7  8  9 10  0  1  2  3]
                 [ 5  6  7  8  9 10  0  1  2  3  4]
                 [ 6  7  8  9 10  0  1  2  3  4  5]
                 [ 7  8  9 10  0  1  2  3  4  5  6]
                 [ 8  9 10  0  1  2  3  4  5  6  7]
                 [ 9 10  0  1  2  3  4  5  6  7  8]
                 [10  0  1  2  3  4  5  6  7  8  9]] i) j))

  (defun a13 (i j)
    "Add two nonnegative integers in the Z_13 residue set to produce
     a sum in that set. Error check to ensure the inputs are valid,
     and use table lookup instead of normal addition/mod."
    (unless (and (integerp i) (integerp j) (<= 0 i) (<= 0 j) (< i 13) (< j 13))
      (error "bad parameters %s and/or %s" i j))
    (aref (aref [[ 0  1  2  3  4  5  6  7  8  9 10 11 12]
                 [ 1  2  3  4  5  6  7  8  9 10 11 12  0]
                 [ 2  3  4  5  6  7  8  9 10 11 12  0  1]
                 [ 3  4  5  6  7  8  9 10 11 12  0  1  2]
                 [ 4  5  6  7  8  9 10 11 12  0  1  2  3]
                 [ 5  6  7  8  9 10 11 12  0  1  2  3  4]
                 [ 6  7  8  9 10 11 12  0  1  2  3  4  5]
                 [ 7  8  9 10 11 12  0  1  2  3  4  5  6]
                 [ 8  9 10 11 12  0  1  2  3  4  5  6  7]
                 [ 9 10 11 12  0  1  2  3  4  5  6  7  8]
                 [10 11 12  0  1  2  3  4  5  6  7  8  9]
                 [11 12  0  1  2  3  4  5  6  7  8  9 10]
                 [12  0  1  2  3  4  5  6  7  8  9 10 11]] i) j))

  (defun m7 (i j)
    "Multiply two nonnegative integers in the Z_7 residue set to produce
     a product in that set. Error check to ensure the inputs are valid,
     and use table lookup instead of normal multiplication/mod."
    (unless (and (integerp i) (integerp j) (<= 0 i) (<= 0 j) (< i 7) (< j 7))
      (error "bad parameters %s and/or %s" i j))
    (aref (aref [[0  0  0  0  0  0  0]
                 [0  1  2  3  4  5  6]
                 [0  2  4  6  1  3  5]
                 [0  3  6  2  5  1  4]
                 [0  4  1  5  2  6  3]
                 [0  5  3  1  6  4  2]
                 [0  6  5  4  3  2  1]] i) j))

  (defun m11 (i j)
    "Multiply two nonnegative integers in the Z_11 residue set to produce
     a product in that set. Error check to ensure the inputs are valid,
     and use table lookup instead of normal multiplication/mod."
    (unless (and (integerp i) (integerp j) (<= 0 i) (<= 0 j) (< i 11) (< j 11))
      (error "bad parameters %s and/or %s" i j))
    (aref (aref [[0  0  0  0  0  0  0  0  0  0  0]
                 [0  1  2  3  4  5  6  7  8  9 10]
                 [0  2  4  6  8 10  1  3  5  7  9]
                 [0  3  6  9  1  4  7 10  2  5  8]
                 [0  4  8  1  5  9  2  6 10  3  7]
                 [0  5 10  4  9  3  8  2  7  1  6]
                 [0  6  1  7  2  8  3  9  4 10  5]
                 [0  7  3 10  6  2  9  5  1  8  4]
                 [0  8  5  2 10  7  4  1  9  6  3]
                 [0  9  7  5  3  1 10  8  6  4  2]
                 [0 10  9  8  7  6  5  4  3  2  1]] i) j))

  (defun m13 (i j)
    "Multiply two nonnegative integers in the Z_13 residue set to produce
     a product in that set. Error check to ensure the inputs are valid,
     and use table lookup instead of normal multiplication/mod."
    (unless (and (integerp i) (integerp j) (<= 0 i) (<= 0 j) (< i 13) (< j 13))
      (error "bad parameters %s and/or %s" i j))
    (aref (aref [[0  0  0  0  0  0  0  0  0  0  0  0  0]
                 [0  1  2  3  4  5  6  7  8  9 10 11 12]
                 [0  2  4  6  8 10 12  1  3  5  7  9 11]
                 [0  3  6  9 12  2  5  8 11  1  4  7 10]
                 [0  4  8 12  3  7 11  2  6 10  1  5  9]
                 [0  5 10  2  7 12  4  9  1  6 11  3  8]
                 [0  6 12  5 11  4 10  3  9  2  8  1  7]
                 [0  7  1  8  2  9  3 10  4 11  5 12  6]
                 [0  8  3 11  6  1  9  4 12  7  2 10  5]
                 [0  9  5  1 10  6  2 11  7  3 12  8  4]
                 [0 10  7  4  1 11  8  5  2 12  9  6  3]
                 [0 11  9  7  5  3  1 12 10  8  6  4  2]
                 [0 12 11 10  9  8  7  6  5  4  3  2  1]] i) j))
#+END_SRC

#+RESULTS:
: m13

:HINT:
  - Hint :: For =to-rns= and =from-rns=, =assoc= and =rassoc= are recommended.
            Thus the creation of an association list (alist) is a prerequisite
            for using these functions. The challenge is to create this alist
            without using mod (or %) or loops.
:END:
#+end_note

#+BEGIN_SRC python :results output
from functools import *

m = [7,11,13]
egcd = lambda a,b: (lambda g,x,y: (g,y-(b//a)*x,x))(*egcd(b%a,a)) if a else (b,0,1) #lambda egcd
D = lambda mod,m: [mod//m[i] for i in range(len(m))] #ind div
P = lambda args: reduce(lambda x,y: x*y,args,1) #product list
Y = lambda o,m: [egcd(o[i],m[i])[1] for i in range(len(m))] #find y
T = lambda r,o,y: sum(r[i]*o[i]*y[i] for i in range(len(r))) #find top
to_rns = lambda *args: [args[0]%i for i in args[1:]] #to rns without list
from_rns = lambda r,m: T(r,D(P(m),m),Y(D(P(m),m),m))%P(m) #from rns without list
rns_dict = lambda *args: {i: to_rns(i,*args) for i in range(0,P(args))} #creates rns dictionary
dict = rns_dict(*m) #rns dictionary
d_to_rns = lambda n: dict[n] #to rns with dictionary
d_from_rns = lambda n: list(dict.keys())[list(dict.values()).index(n)] #from rns with dictionary
add_rns = lambda a,b,m: [(a[i]+b[i])%m[i] for i in range(0,len(m))]
mul_rns = lambda a,b,m: [(a[i]*b[i])%m[i] for i in range(0,len(m))]

def test(n,b):
    print("n =",n)
    print("rns(n) =",d_to_rns(n))
    print("from_rns(rns(n)) =",d_from_rns(d_to_rns(n)))
    print("add_rns(rns(n),rns(b)) =",add_rns(d_to_rns(n),d_to_rns(b),m))
    print("from_rns(add_rns(rns(n),rns(b))) =",d_from_rns(add_rns(d_to_rns(n),d_to_rns(b),m)))
    print("mul_rns(rns(n),rns(b)) =",mul_rns(d_to_rns(n),d_to_rns(b),m))
    print("from_rns(mul_rns(rns(n),rns(b))) =",d_from_rns(mul_rns(d_to_rns(n),d_to_rns(b),m)))

test(9,20)
#+END_SRC

#+RESULTS:
: n = 9
: rns(n) = [2, 9, 9]
: from_rns(rns(n)) = 9
: add_rns(rns(n),rns(b)) = [1, 7, 3]
: from_rns(add_rns(rns(n),rns(b))) = 29
: mul_rns(rns(n),rns(b)) = [5, 4, 11]
: from_rns(mul_rns(rns(n),rns(b))) = 180

** DONE GYN
   CLOSED: [2018-02-28 Wed 16:42]
   :LOGBOOK:
   CLOCK: [2018-03-02 Fri 14:26]--[2018-03-02 Fri 14:31] =>  0:05
   CLOCK: [2018-02-28 Wed 16:31]--[2018-02-28 Wed 16:42] =>  0:11
   CLOCK: [2018-02-27 Tue 22:20]--[2018-02-27 Tue 23:15] =>  0:55
   :END:
#+begin_note
  Help Abu and Ila out. This version of =mod-expt= gets a /little/ better
  mileage than their simplistic one. It keeps the numbers smaller by reducing
  each partial exponentiation by modding it once every iteration instead of once,
  period. What fact or facts of modular arithmetic justify this?

#+BEGIN_SRC emacs-lisp :results silent
  (defun a-better-mod-expt (base power modulus)
    (loop with result = 1
          for n from 1 to power
          do (setq result (mod (* result base) modulus))
          finally return result))
#+END_SRC
:HINT:
  - Hint :: Reread the interchange between Til, Abu and Ila in PQS.
:END:
#+end_note
#+begin_info
#+BEGIN_SRC python :results output
def better(b,p,m):
    r=1
    for i in range(1,p+1):
        r=(r*b)%m
    return r 
print(better(2,3,11))
#+END_SRC

#+RESULTS:
: 8

Fact 7 and fact 8 of modular arithmetic justify this function.
#+end_info
** DONE XGG
   CLOSED: [2018-03-01 Thu 14:02]
   :LOGBOOK:
   CLOCK: [2018-03-02 Fri 14:05]--[2018-03-02 Fri 17:14] =>  3:09
   CLOCK: [2018-03-01 Thu 12:37]--[2018-03-01 Thu 14:02] =>  1:25
   CLOCK: [2018-02-28 Wed 16:42]--[2018-02-28 Wed 18:41] =>  1:59
   :END:
#+begin_note
  Experiment with RSA using the following code. You will need a better modular
  exponentiation function than =mod-expt= or perhaps even =a-better-mod-expt=.
  Implement the =pow-mod= function to be this better version. Note the
  difference between /encoding/ and /encryption/, and between /decryption/ and
  /decoding/.

  How \ldquo{}big\rdquo a message can you successfully round-trip?

#+BEGIN_SRC emacs-lisp :results silent
  (defun rsa-encrypt (message n e &optional encoder)
    (let* ((message-encoded (funcall (or encoder 'identity) message))
           (encrypted (pow-mod message-encoded e n)))
      encrypted))

  (defun rsa-decrypt (encrypted n d &optional decoder)
    (let* ((decrypted (pow-mod encrypted d n))
           (message-decoded (funcall (or decoder 'identity) decrypted)))
      message-decoded))

  (defun round-trip (message n e d &optional encoder decoder)
    (equal message
           (rsa-decrypt (rsa-encrypt message n e encoder)
                        n d decoder)))
#+END_SRC

  You will need working =from-base-27= and =to-base-27= functions, as well as a
  working knowledge of /symbol property lists/ to play with /this/ test code:

#+BEGIN_SRC emacs-lisp
  (defun test-rsa (message-with-spaces)
    (let* ((message (mapconcat 'identity
                               (split-string message-with-spaces " ") "@"))
            (n (get 'rsa-players :n))
            (e (get 'rsa-players :e))
            (d (get 'rsa-players :d))
            (encrypted (rsa-encrypt message n e 'from-base-27))
            (decrypted (rsa-decrypt encrypted n d 'to-base-27))
            (decrypted-message-with-spaces
             (mapconcat 'identity (split-string decrypted "@") " "))
            (success (string= message-with-spaces
                              decrypted-message-with-spaces)))
       (princ (format (concat "\"%s\"\nwas encoded and encrypted as\n%s\n"
                              "then decrypted and decoded as\n\"%s\"\n")
                      message-with-spaces
                      encrypted
                      decrypted-message-with-spaces))
       (princ (if success "" "un"))
       (princ "successfully.\n")
       success))
#+END_SRC

#+RESULTS:
: test-rsa

:HINT:
  - Hint :: This will be discussed in class.
:END:
#+end_note
#+BEGIN_SRC python :results output
  gcd = lambda a,b: a if b==0 else not a%b and b or gcd(b,a%b)
  is_coprime = lambda x,y: gcd(x,y)==1
  egcd = lambda a,b: (lambda g,x,y: (g,y-(b//a)*x,x))(*egcd(b%a,a)) if a else (b,0,1) #lambda egcd
  rsa_encrypt = lambda m,n,e,en=None: [pow(((en or (lambda x: x))(m))[x],e,n) for x in range(len((en or (lambda x: x))(m)))]
  rsa_decrypt = lambda en,n,d,de=None: (de or (lambda x: x))([pow(en[x],d,n) for x in range(len(en))])
  round_trip = lambda m,n,e,d,en=None,de=None: rsa_decrypt(rsa_encrypt(m,n,e,en),n,d,de)
  al = {' ':0,'a':1,'b':2,'c':3,'d':4,'e':5,'f':6,'g':7,'h':8,'i':9,'j':10,'k':11,'l':12,'m':13,'n':14,'o':15,'p':16,'q':17,'r':18,'s':19,'t':20,'u':21,'v':22,'w':23,'x':24,'y':25,'z':26}
  dl = {0:' ',1:'a',2:'b',3:'c',4:'d',5:'e',6:'f',7:'g',8:'h',9:'i',10:'j',11:'k',12:'l',13:'m',14:'n',15:'o',16:'p',17:'q',18:'r',19:'s',20:'t',21:'u',22:'v',23:'w',24:'x',25:'y',26:'z'}
  alphadec = lambda a: al.get(a, "Invalid character")
  decalpha = lambda d: dl.get(d,"Invalid number")
  eng_to_dec = lambda n: [alphadec(i) for i in n]
  dec_to_eng = lambda n: [decalpha(i) for i in n]

  def list_to_string(l):
      s,u,i = '','',0
      for j in l:
          if i==0 or u==' ':
              j = j.upper()
          s,u,i = s+j,str(j),i+1
      return s

  def get_rsa_vals(p,q):
      n,tee,e,d=p*q,(p-1)*(q-1),1,1
      for i in range(2,int(tee/2+1)):
          if is_coprime(i,tee): e=i
      d = egcd(e,tee)[1]
      return (n,e,d)

  def test_rsa(message,p,q):
      n,e,d = get_rsa_vals(p,q)
      encrypted = rsa_encrypt(message,n,e,eng_to_dec)
      decrypted = rsa_decrypt(encrypted,n,d,dec_to_eng)
      output = "{} was encoded and decrypted as {} then decrypted and decoded as {}".format(message,encrypted,decrypted)
      if message==decrypted: output += " successfully (like a boss)."
      else: output += " and was a complete failure."
      print(output,"\nString Form: {}".format(list_to_string(decrypted)))

  test_rsa(['i',' ','a','m',' ','a','w','e','s','o','m','e'],47,73)
#+END_SRC

#+RESULTS:
: ['i', ' ', 'a', 'm', ' ', 'a', 'w', 'e', 's', 'o', 'm', 'e'] was encoded and decrypted as [1525, 0, 1, 264, 0, 1, 2536, 2745, 2167, 915, 264, 2745] then decrypted and decoded as ['i', ' ', 'a', 'm', ' ', 'a', 'w', 'e', 's', 'o', 'm', 'e'] successfully (like a boss). 
: String Form: I Am Awesome

#+begin_info
The length of the message must be shorter than the value of n, or p*q.
#+end_info

* Puzzle
** DONE GYI
   CLOSED: [2018-03-09 Fri 18:26]
   :LOGBOOK:
   CLOCK: [2018-03-02 Fri 16:29]--[2018-03-02 Fri 19:05] =>  2:36
   CLOCK: [2018-03-02 Fri 14:31]--[2018-03-02 Fri 17:14] =>  2:43
   CLOCK: [2018-03-02 Fri 13:22]--[2018-03-02 Fri 14:12] =>  0:50
   CLOCK: [2018-03-01 Thu 23:01]--[2018-03-02 Fri 00:13] =>  1:12
   CLOCK: [2018-02-28 Wed 18:44]--[2018-02-28 Wed 20:26] =>  1:42
   CLOCK: [2018-02-27 Tue 17:35]--[2018-02-27 Tue 17:49] =>  0:14
   :END:
#+begin_note
   These eight small-number triples are not random:

   [[1 1 3] [1 1 4] [1 4 3] [1 4 4] [2 1 3] [2 1 4] [2 4 3] [2 4 4]]

   They have something to do with the product of the first three odd primes and
   the fourth power of two.

   Find the connection.
:HINT:
  - Hint :: This problem involves the Chinese Remainder Theorem. Use of the
            =crt-solve= function in the solution to GMY will spur on your
            problem-solving investigation!
:END:
#+end_note
*** Rephrase
Find the correlation between the 8 triples listed above in respect to the product of the first three odd primes and 2^4.
*** Approach
I will create python code to experiment with the crt-solve function and I will search for any possible connections.
*** Solution
#+begin_info
16 is a quadratic residue of 105, which is the product of 3, 5, and 7. 
[31, 46, 94, 4, 101, 11, 59, 74] is the list of values that results by passing 
the 8 small-number triples through a from rns function using 3, 5 and 7 as the 
primes. [961, 2116, 8836, 16, 10201, 121, 3481, 5476] is the result of squaring 
each value. [16, 16, 16, 16, 16, 16, 16, 16] is the result of modding each of the
previous with 105. Thus, this is the connection between the original list of
lists, the product of the first three odd primes, and 2^4.
#+end_info
*** Proof
#+BEGIN_SRC python :results output
from functools import *

m = [3,5,7]
egcd = lambda a,b: (lambda g,x,y: (g,y-(b//a)*x,x))(*egcd(b%a,a)) if a else (b,0,1) #lambda egcd
D = lambda mod,m: [mod//m[i] for i in range(len(m))] #ind div
P = lambda args: reduce(lambda x,y: x*y,args,1) #product list
Y = lambda o,m: [egcd(o[i],m[i])[1] for i in range(len(m))] #find y
T = lambda r,o,y: sum(r[i]*o[i]*y[i] for i in range(len(r))) #find top
from_rns = lambda r,m: T(r,D(P(m),m),Y(D(P(m),m),m))%P(m) #from rns
rns_list = [[1,1,3],[1,1,4],[1,4,3],[1,4,4],[2,1,3],[2,1,4],[2,4,3],[2,4,4]]
from_rns_dict = lambda rns: {from_rns(rns[i],m): rns[i] for i in range(0,len(rns))}
from_rns_list = lambda rns: [from_rns(rns[i],m) for i in range(0,len(rns))]
print(from_rns_dict(rns_list))
print(from_rns_list(rns_list))

sqr_list = lambda l: [*map(lambda i:i**2,l)]
mod_list = lambda l,n: [*map(lambda i:i%n,l)]
print(sqr_list(from_rns_list(rns_list)))
print(mod_list(sqr_list(from_rns_list(rns_list)),P(m)))
#+END_SRC

#+RESULTS:
: {31: [1, 1, 3], 46: [1, 1, 4], 94: [1, 4, 3], 4: [1, 4, 4], 101: [2, 1, 3], 11: [2, 1, 4], 59: [2, 4, 3], 74: [2, 4, 4]}
: [31, 46, 94, 4, 101, 11, 59, 74]
: [961, 2116, 8836, 16, 10201, 121, 3481, 5476]
: [16, 16, 16, 16, 16, 16, 16, 16]

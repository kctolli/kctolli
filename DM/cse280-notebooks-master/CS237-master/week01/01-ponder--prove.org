#+TITLE: DM1 Week 01 Ponder and Prove Assignment
#+LANGUAGE: en
#+OPTIONS: H:4 num:nil toc:nil \n:nil @:t ::t |:t ^:t *:t TeX:t LaTeX:t
#+OPTIONS: html-postamble:nil
#+STARTUP: showeverything entitiespretty
#+SETUPFILE: ../theme-bigblow.setup
#+BEGIN: clocktable :maxlevel 2 :scope file
#+CAPTION: Clock summary at [2018-01-20 Sat 13:09]
| Headline                |    Time |       |
|-------------------------+---------+-------|
| *Total time*            | *20:12* |       |
|-------------------------+---------+-------|
| Exercises               |   15:11 |       |
| \_  Read Subsection ABC |         | 10:24 |
| \_  UCA                 |         |  0:11 |
| \_  ODS                 |         |  0:08 |
| \_  UGX                 |         |  0:03 |
| \_  OGR                 |         |  0:03 |
| \_  UWM                 |         |  0:04 |
| \_  OPZ                 |         |  0:09 |
| \_  UOX                 |         |  0:09 |
| \_  OTX                 |         |  0:05 |
| \_  UOT                 |         |  0:09 |
| \_  UIN                 |         |  0:05 |
| \_  OJL                 |         |  1:08 |
| \_  UCG                 |         |  0:28 |
| \_  OQT                 |         |  0:05 |
| \_  UTQ                 |         |  0:14 |
| \_  UJU                 |         |  0:13 |
| \_  OLH                 |         |  0:33 |
| \_  UWY                 |         |  0:17 |
| \_  OBW                 |         |  0:16 |
| \_  USL                 |         |  0:14 |
| \_  OYP                 |         |  0:07 |
| \_  UBV                 |         |  0:06 |
| Problems                |    5:01 |       |
| \_  OIM *               |         |  0:14 |
| \_  OIO *               |         |  0:13 |
| \_  UIJ                 |         |  0:11 |
| \_  OYU                 |         |  0:07 |
| \_  UOH                 |         |  0:15 |
| \_  OZD *               |         |  0:11 |
| \_  UZM                 |         |  0:22 |
| \_  OOY *               |         |  0:06 |
| \_  OKJ *               |         |  0:14 |
| \_  UVH                 |         |  0:25 |
| \_  OJM *               |         |  0:08 |
| \_  ULQ *               |         |  0:14 |
| \_  OTD                 |         |  0:14 |
| \_  OKQ *               |         |  0:10 |
| \_  UKF                 |         |  0:14 |
| \_  OKL                 |         |  0:36 |
| \_  UEZ                 |         |  0:13 |
| \_  OYW *               |         |  0:19 |
| \_  OUB                 |         |  0:35 |
#+END:

* Instructions
  See [[file:../week00/00-ponder--prove.org]]

* Exercises
** DONE Read Subsection ABC
   CLOSED: [2018-01-17 Wed 18:33]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 16:18]--[2018-01-19 Fri 21:40] =>  5:22
   CLOCK: [2018-01-18 Thu 16:23]--[2018-01-18 Thu 19:06] =>  2:43
   CLOCK: [2018-01-17 Wed 16:14]--[2018-01-17 Wed 18:33] =>  2:19
   :END:
** DONE UCA
   CLOSED: [2018-01-17 Wed 17:47]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 17:25]--[2018-01-17 Wed 17:36] =>  0:11
   :END:
#+begin_note
  Start your exercise warmup by thinking up three examples and three
  non-examples of propositions. Make them pithy.
#+end_note

#+begin_info
 Examples of propositions:
  
  * The sky is red.
  * Microsoft is better than Apple.
  * Cars have wheels.
  
 Non-examples of propositions:
  
  * What is your name?
  * Let's get out of here!
  * Holy cow! 
#+end_info
** DONE ODS
   CLOSED: [2018-01-17 Wed 17:47]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 17:36]--[2018-01-17 Wed 17:44] =>  0:08
   :END:
#+begin_note
  Which of the following sentences are propositions? For each proposition, give
  its truth value (true or false).
  1. 2 + 2 = 4.
  2. 2 + 1 = 4.
  3. Toronto is the capital of Germany.
  4. Read these questions carefully.
  5. x + y + z = q. 
  6. What time is it?
  7. 2x + 3 = 9.
  8. Simon says jump.
#+end_note

#+begin_info
  1. The sentence is a proposition, and it is true.
  2. The sentence is a proposition, and it is false.
  3. The sentence is a proposition, and it is false.
  4. The sentence is not a proposition.
  5. The sentence is not a proposition.
  6. The sentence is not a proposition.
  7. The sentence is not a proposition.
  8. The sentence is not a proposition.
#+end_info
** DONE UGX
   CLOSED: [2018-01-17 Wed 17:47]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 17:44]--[2018-01-17 Wed 17:47] =>  0:03
   :END:
#+begin_note
  Put the proposition \ldquo{} /v/ is a member of the set of English alphabet
  consonants\rdquo in symbolic logic terms, using /C/ as the name of the set of
  consonants.
:HINT:
  - Hint :: This is very straightforward. Three symbols are all that are called
            for.
:END:
#+end_note

#+begin_info
V \exist C
#+end_info
** DONE OGR
   CLOSED: [2018-01-17 Wed 17:50]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 17:47]--[2018-01-17 Wed 17:50] =>  0:03
   :END:
#+begin_note
  Which of the following are simple (not compound) propositions?

  1. Weeks are shorter than months.
  2. Days are longer than hours and minutes.
  3. Hours are longer than minutes and seconds are shorter than minutes.
  4. People can fly or pigs can sing.
#+end_note

#+begin_info
  1. The statement is a simple proposition.
  2. The statement is a compound proposition.
  3. The statement is a compound proposition.
  4. The statement is a compound proposition.
#+end_info
** DONE UWM
   CLOSED: [2018-01-17 Wed 17:58]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 17:50]--[2018-01-17 Wed 17:54] =>  0:04
   :END:
#+begin_note
  Express in English the negation of each of these propositions:

  1. Two plus two equals four. 
  2. Two plus one is less than four.
  3. Toronto is the capital of Germany.
  4. A total eclipse happens infrequently.
  5. Special measures must be taken to deal with the current situation.
:HINT:
  Do /not/ just prefix each proposition with \lsquo{}It is not the case that\rsquo.
:END:
#+end_note

#+begin_info
  1. Two plus two is not equal to four.
  2. Two plus one is not less than four.
  3. Toronto is not the capital of Germany.
  4. Total eclipses happen frequently. (Total eclipses happen all the time!)
  5. Special measures must not be taken to deal with the current situation.
#+end_info
** DONE OPZ
   CLOSED: [2018-01-17 Wed 18:03]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 17:54]--[2018-01-17 Wed 18:03] =>  0:09
   :END:
#+begin_note
  Let /p/ and /q/ be the propositions:

  /p/: I studied.

  /q/: I got an F on the test.

  Express each of the propositions below as an English sentence:
  1. \not /p/
  2. /p/ \lor /q/
  3. /p/ \land /q/
  4. \not /p/ \land \not /q/
  5. \not /p/ \lor /q/
  6. \not (/p/ \lor /q/)
#+end_note

#+begin_info
  1. I did not study.
  2. I studied or I got an F on the test.
  3. I studied and I got an F on the test.
  4. I did not study and I did not get an F on the test.
  5. I did not study or I got an F on the test.
  6. I did not study or I did not get an F on the test.
#+end_info
** DONE UOX
   CLOSED: [2018-01-17 Wed 18:13]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 18:04]--[2018-01-17 Wed 18:13] =>  0:09
   :END:
#+begin_note
  What other special forms besides =if= does elisp have for doing conditionals?
  Why are they called \ldquo{}special\rdquo?
:HINT:
  - Hint :: You can find at least six.
:END:
#+end_note

#+begin_info
  Some special forms are: and, while, or, when, unless, else, and cond.
  All of these special forms are special because they are used in most algebraic programming languages. 
#+end_info
** DONE OTX
   CLOSED: [2018-01-17 Wed 18:18]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 18:13]--[2018-01-17 Wed 18:18] =>  0:05
   :END:
#+begin_note
  Determine whether these sentences use an inclusive or, or an exclusive or:
  1. A side of fries or chips comes with your sandwich. XOR.
  2. A high school diploma or a GED are needed for this position. XOR. 
  3. To get your license, you must provide your social security card or birth certificate. OR.
  4. We accept Mastercard or Visa credit cards. OR.
  5. You can cash in your tickets or exchange them for a prize. XOR.
  6. Take it or leave it. XOR.
#+end_note

#+begin_info
  1. The sentence uses an exclusive or.
  2. The sentence uses an exclusive or.
  3. The sentence uses an inclusive or.
  4. The sentence uses an inclusive or.
  5. The sentence uses an exclusive or.
  6. The sentence uses an exclusive or.
#+end_info
** DONE UOT
   CLOSED: [2018-01-17 Wed 18:27]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 18:18]--[2018-01-17 Wed 18:27] =>  0:09
   :END:
#+begin_note
  Return to the task of comparing the two expressions:

  1. =p and (q or not r)=
  2. =(p and q) or not r=

  Build a truth table of expression 2 and compare it with the truth table of
  expression 1 given just above.

:HINT:
  - Hint :: The two truth tables differ in two places.
:END:
#+end_note

#+begin_info

1.
   P    and   (Q     or   not    r)
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  | *1* |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  1  | *1* |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+

2.
  (P    and    Q)    or   not    r
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  | *0* |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  1  | *0* |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+

*Differences are highlighted (with asterisks)*

#+end_info
** DONE UIN
   CLOSED: [2018-01-17 Wed 18:33]
   :LOGBOOK:
   CLOCK: [2018-01-17 Wed 18:28]--[2018-01-17 Wed 18:33] =>  0:05
   :END:
#+begin_note
  What is the set difference between the set of letters in the English alphabet
  and the set of letters in the Hawaiian alphabet?
#+end_note

#+begin_info
SET E: {A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z}
SET H: {A, B,    D, E,       H, I,    K, L, M, N, O, P,    R,    T, U, V, W         }
I looked this up on-line. The differences are shown where there is a space instead of a letter.
#+end_info
** DONE OJL
   CLOSED: [2018-01-19 Fri 17:33]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 16:32]--[2018-01-19 Fri 17:33] =>  1:01
   CLOCK: [2018-01-18 Thu 12:20]--[2018-01-18 Thu 12:27] =>  0:07
   :END:
#+begin_note
  Justify where $p = x \in A, q = x \in B, r = x \in C$:

  | Set | As Union of     | Logic \equiv Set Operation Description                                      |
  |-----+-----------------+------------------------------------------------------------------------|
  | A   | 4 \cup 5 \cup 7 \cup 6 | $(p \land \not q \land \not r) \lor (p \land \not q \land r) \lor (p \land q \land r) \lor (p \land q \land \not r)$ |
  | B   | 2 \cup 3 \cup 7 \cup 6 | $(\not p \land q \land \not r) \lor (\not p \land q \land r) \lor (p \land q \land r) \lor (p \land q \land \not r)$ |
  | C   | 1 \cup 3 \cup 5 \cup 7 | $(\not p \land \not q \land r) \lor (\not p \land q \land r) \lor (p \land \not q \land r) \lor (p \land q \land r)$ |
:HINT:
  - Hint :: The exercise could be more explicitly stated as: Provide
            justification for the equivalence of the logical and set operation
            description (columns 3 and 2) for each set (column 1) in the table.
            So, use wording like \ldquo{}Set A is justified as the union of numbered
            regions 4, 5, 7 and 6, because \dots\rdquo.
:END:
#+end_note

#+begin_info
  The numbered regions from 1 to 7 contain varying amounts of sets A, B and C.
  1 does not contain A or B, but it does contain C.
  2 does not contain A or C, but it does contain B.
  3 does not contain A, but it does contain B and C.
  4 does not contain B or C, but it does contain A.
  5 does not contain B, but it does contain A and C.
  6 does not contain C, but it does contain B and A.
  7 contains by A, B, and C.
  Thus, set A is illustrated by the union of the numbered regions 4, 5, 7 and 6,
  B is illustrated by the union of the numbered regions 2, 3, 7 and 6,
  and C  is illustrated by the union of the numbered regions 1, 3, 5 and 7.
#+end_info
** DONE UCG
   CLOSED: [2018-01-18 Thu 13:43]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 12:38]--[2018-01-18 Thu 13:06] =>  0:28
   :END:
#+begin_note
  Let set *A* = =[verve vim vigor]=, set *B* = =[butter vinegar pepper vigor]=.
  For each of the following set operations, give its resulting members (as a
  vector of symbols):

  1. The set of words that are in A *or* B; call this set *C*.
  2. The set of words that are in A *and* B; call this set *D*.
  3. The subset of set *C* of words that start with \lsquo{}v\rsquo.
  4. The subset of set *C* of words that end with \lsquo{}r\rsquo.
  5. The subset of set *C* of words that start with \lsquo{}v\rsquo and end with \lsquo{}r\rsquo.
  6. The subset of set *D* of words that have six letters.
:HINT:
  - Hint :: This is also very straightforward. But see if you can write some
            elisp code to help you find the answers!
:END:
#+end_note

#+begin_info
  1. *C* = =[verve vim vigor butter vinegar pepper]=
  2. *D* = =[vigor]=
  3. *C[start with 'v']* = =[verve vim vigor vinegar]=
  4. *C[end with 'r']* = =[vigor butter vinegar pepper]=
  5. *C[start with 'v' \land end with 'r']* = =[vigor vinegar]=
  6. *D[word length = 6]* = =[]=
#+end_info
** DONE OQT
   CLOSED: [2018-01-18 Thu 13:48]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 13:43]--[2018-01-18 Thu 13:48] =>  0:05
   :END:
#+begin_note
  Let /p/ and /q/ be the propositions:

  /p/: I studied.

  /q/: I got an A on the test.

  Express each of the propositions below as an English sentence:
  1. /p/ \rarr /q/
  2. \not /p/ \lor \not /q/
  3. \not /p/ \rarr (p \lor q)
  4. \not /p/ \rarr \not /q/
#+end_note

#+begin_info
  1. I studied, then I got an A on the test.
  2. I did not study or I did not get an A on the test.
  3. I did not study, then I studied or got an A on the test.
  4. I did not study, then I did not get an A on the test.
#+end_info
** DONE UTQ
   CLOSED: [2018-01-18 Thu 14:19]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 13:48]--[2018-01-18 Thu 14:02] =>  0:14
   :END:
#+begin_note
  Let /p/ and /q/ be the propositions:

  /p/: You applied for admission at BYU-Idaho.

  /q/: You were accepted.

  Express these sentences as propositions using logical connectives.
  1. You applied for admission at BYU-Idaho and were accepted.
  2. You did not apply for admission at BYU-Idaho but were still accepted.
  3. You applied for admission at BYU-Idaho but were not accepted.
  4. Either you did not apply for admission at BYU-Idaho and didn\rsquo{}t get accepted
     or you did apply and got accepted.
#+end_note

#+begin_info
  1. /p/ \land /q/
  2. \not /p/ \land /q/
  3. /p/ \land \not /q/
  4. (\not /p/ \land \not /q/) \lor (/p/ \land /q/) 
#+end_info
** DONE UJU
   CLOSED: [2018-01-18 Thu 14:31]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 14:18]--[2018-01-18 Thu 14:31] =>  0:13
   :END:
#+begin_note
  Use truth tables to verify the /commutative/ laws.
  1. $p \vee q \equiv q \vee p$
  2. $p \wedge q \equiv q \wedge p$
#+end_note

#+begin_info

  1.

  (p     \lor    q)    \equiv    (q     \lor    p)
+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  1  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, p \lor q \equiv q \lor p. 

  2.

  (p     \land    q)    \equiv    (q     \land    p)
+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, p \land q \equiv q \land p.
#+end_info
** DONE OLH
   CLOSED: [2018-01-18 Thu 18:12]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 17:39]--[2018-01-18 Thu 18:12] =>  0:33
   :END:
#+begin_note
  Use truth tables to verify the associative laws.
  1. $(p \vee q) \vee r \equiv p \vee (q \vee r)$
  2. $(p \wedge q) \wedge r \equiv p \wedge (q \wedge r)$
#+end_note

#+begin_info
1.
  (p    \lor     q)    \lor    r      \equiv     p    \lor    (q     \lor    r)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  1  |  1  |  0  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, (p \lor q) \lor r \equiv p \lor (q \lor r).

2.
  (p    \land     q)    \land    r      \equiv     p    \land    (q     \land    r)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  1  |  1  |  0  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |  0  |  1  |  0  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |  1  |  1  |  0  |  0  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  0  |  1  |  1  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  1  |  1  |  1  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  0  |  1  |  1  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, (p \land q) \land r \equiv p \land (q \land r).

#+end_info
** DONE UWY
   CLOSED: [2018-01-18 Thu 18:27]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 18:10]--[2018-01-18 Thu 18:27] =>  0:17
   :END:
#+begin_note
  Use truth tables to verify the distributive laws.
  1. $p \wedge (q \lor r) \equiv (p \wedge q) \lor (p \wedge r)$.
  2. $p \vee (q \wedge r) \equiv (p \vee q) \wedge (p \vee r)$.
#+end_note

#+begin_info
1.
   p     \land   (q     \lor    r)     \equiv   (p     \land     q)   \lor    (p     \land     r)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  1  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  1  |  1  |  0  |  0  |  1  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  0  |  1  |  1  |  0  |  0  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  1  |  1  |  1  |  1  |  0  |  0  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, p \wedge (q \lor r) \equiv (p \wedge q) \lor (p \wedge r).

2.
   p     \lor   (q     \land    r)     \equiv   (p     \lor     q)   \land    (p     \lor     r)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  0  |  1  |  0  |  0  |  0  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  1  |  1  |  0  |  0  |  0  |  0  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |  0  |  1  |  0  |  1  |  1  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  0  |  0  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  0  |  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  0  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, p \vee (q \wedge r) \equiv (p \vee q) \wedge (p \vee r).

#+end_info

** DONE OBW
   CLOSED: [2018-01-18 Thu 18:44]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 18:28]--[2018-01-18 Thu 18:44] =>  0:16
   :END:
#+begin_note
  Use truth tables to verify De Morgan\rsquo{}s laws:
  1. $\neg (p \vee q) \equiv \neg p \wedge \neg q$
  2. $\neg (p \wedge q) \equiv \neg p \vee \neg q$
#+end_note

#+begin_info
1.
   \not    (p     \lor    q)    \equiv     \not     p     \land    \not     q    
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  1  |  1  |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  1  |  1  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, \neg (p \vee q) \equiv \neg p \wedge \neg q.

2.
   \not    (p     \land    q)    \equiv     \not     p     \lor    \not     q    
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  1  |  1  |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  1  |  1  |  0  |  1  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

As shown in the table above, \neg (p \wedge q) \equiv \neg p \vee \neg q. 

#+end_info
** DONE USL
   CLOSED: [2018-01-18 Thu 19:00]
   :LOGBOOK:
   CLOCK: [2018-01-18 Thu 18:46]--[2018-01-18 Thu 19:00] =>  0:14
   :END:
#+begin_note
  Use truth tables to verify some miscellaneous laws, letting $\mathbf{1}$ =
  true, $\mathbf{0}$ = false:
  1. $p \land \mathbf{1} \equiv p$ (idempotence)
  2. $p \lor \mathbf{0} \equiv p$ (idempotence)
  3. $\not \not p \equiv p$ (double negation)
  4. $p \land \mathbf{0} \equiv \mathbf{0}$ (absorption)
  5. $p \lor \mathbf{1} \equiv \mathbf{1}$ (absorption)
#+end_note

#+begin_info
1.
   p     \land    1     \equiv     p
+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+

As shown in the table above, p \land 1 \equiv p.

2.
   p     \lor    0     \equiv     p
+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+

As shown in the table above, p \lor 0 \equiv p.

3.
   \not     \not     p     \equiv     p
+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+
|  1  |  0  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+

As shown in the table above, \not \not p \equiv p.

4.
   p     \land    0     \equiv     0
+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+

As shown in the table above, p \land 0 \equiv 0.

5.
   p     \lor    1     \equiv     1
+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+

As shown in the table above, p \lor 1 \equiv 1.
#+end_info
** DONE OYP
   CLOSED: [2018-01-19 Fri 17:43]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 17:36]--[2018-01-19 Fri 17:43] =>  0:07
   :END:
#+begin_note
  Match the following set identities with their counterparts in the
  miscellaneous logic laws:

  1. A \cap U = A
  2. A \cup U = U.
  3. A \cup \empty = A.
  4. A \cap \empty = \empty.
  5. $\overline{\overline{\mathsf{A}}} = \mathsf{A}$.
#+end_note

#+begin_info
  1. A \cap U = A \equiv p \land 1 = 0.
  2. A \cup U = U \equiv p \lor 1 = 1.
  3. A \cup \empty = A \equiv p \lor 0 = p.
  4. A \cap \empty = \empty \equiv p \land 0 = 0.
  5. $\overline{\overline{\mathsf{A}}} = \mathsf{A}$ \equiv \not \not p = p. 
#+end_info
** DONE UBV
   CLOSED: [2018-01-19 Fri 17:52]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 17:46]--[2018-01-19 Fri 17:52] =>  0:06
   :END:
#+begin_note
  Use DeMorgan's Laws to find the negations of the propositions:
  1. Winning the first round is necessary for winning the trophy.
  2. Winning the tournament is sufficient for winning the trophy.
  3. I am powerful and successful.
  4. You can pass or fail this test.
  5. Getting an A on the final exam is necessary and sufficient for passing this class.
#+end_note

#+begin_info
  1. Not winning the first round is not necessary for winning the trophy.
  2. Not winning the tournament is not sufficient for winning the trophy.
  3. I am not powerful or successful.
  4. You cannot pass and fail this test.
  5. Not getting an A on the final exam is not necessary or sufficient for passing this class.
#+end_info
* Problems
  Note: * means optional. If it\rsquo{}s not starred, it\rsquo{}s required.
** DONE OIM *
   CLOSED: [2018-01-20 Sat 12:37]
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 12:35]--[2018-01-20 Sat 12:37] =>  0:02
   CLOCK: [2018-01-19 Fri 17:54]--[2018-01-19 Fri 18:06] =>  0:12
   :END:
#+begin_note
  What is the correlation between the first three columns and the last three
  columns in this table?
#+end_note

#+begin_info
  The first three columns give a description of the numbered section (the number, color and which sets it includes).
  The second three columns explicitly state which sets make a part of the numbered section.
#+end_info
** TODO OIO *
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 11:20]--[2018-01-20 Sat 11:33] =>  0:13
   :END:
#+begin_note
  Here is a \ldquo{}setq chain\rdquo illustrating subset size compared to superset size:

#+BEGIN_SRC emacs-lisp
  (setq A [s i z e]
        a 4
        B [b i g g e r i n s i z e]
        b 12
        A-is-a-subset-of-B t
        a-is-less-than-or-equal-to-b t)
#+END_SRC

#+RESULTS:
: t

  Write or find built-in functions so that you can revise this chain of
  assignments to avoid the literals 4, 12 and =t=, instead replacing
  them with function calls.
:HINT:
  - Hint :: Here again, the elisp mini-primer is your friend.
:END:
#+end_note

#+begin_info
 #+BEGIN_SRC emacs-lisp
  (setq A [s i z e]
        a 4
        B [b i g g e r i n s i z e]
        b 12
        (defun [A-is-a-subset-of-B] (t)) 
        (defun [a-is-less-than-or-equal-to-b] (t)) 
#+END_SRC

I still have no idea what I'm doing. 
#+end_info
** DONE UIJ
   CLOSED: [2018-01-19 Fri 18:17]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 18:06]--[2018-01-19 Fri 18:17] =>  0:11
   :END:
#+begin_note
  The following Venn diagram numbers three regions of a set B with a subset A
  relationship within a Universal set U:

#+BEGIN_SRC ditaa :file img/fig-set-subset-conditional.png :cmdline -S :export :eval no-export
  U                       1
    +-------------------+
    | B               2 |
    |   +-----------+   |
    |   | A       3 |   |
    |   |           |   |
    |   |           |   |
    |   +-----------+   |
    |                   |
    +-------------------+
#+END_SRC

#+RESULTS:
[[file:../img/fig-set-subset-conditional.png]]

  Make a connection between the logical conditional operator (\rightarrow) and the
  /definition/ of a subset. Refer to the three numbered regions in your answer.
:HINT:
  - Hint :: Making this connection means: 1) express the logical conditional
            operator in terms of the definition of subset, or 2) express subset
            in terms of the definition of the logical conditional operator,
            whichever makes the most sense to you. Express either (or both) in
            terms of the three numbered regions.

  - More Emphatically :: Making this connection will help you understand why the
       conditional operator works the way it does. To answer fully, you /must/
       give the definition of a subset, and you /must/ refer to the three
       numbered regions in the Venn diagram.
:END:
#+end_note

#+begin_info
  Let a \in A, b \in B, u \in U.
  a \rightarrow b \rightarrow u.
  Because A is a proper subset of B, which is a proper subset of U, a proposition that includes A must include B,
  and a proposition that includes B must include U.
  (A subset is a part of a larger group of related things)
#+end_info
** DONE OYU
   CLOSED: [2018-01-19 Fri 18:27]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 18:20]--[2018-01-19 Fri 18:27] =>  0:07
   :END:
#+begin_note
   There are many different ways in English to put the same conditional statement,
   \lsquo{}if p then q\rsquo{}. Here are four:
   - omit the \lsquo{}then\rsquo :: if p, q
   - reversed :: q if p
   - \lsquo{}whenever\rsquo means \lsquo{}if\rsquo :: whenever p, q (or q whenever p)
   - p \rarr q :: (pronounced) p only if q.

   Find at least four other ways.
:HINT:
 - Hint :: Some have to do with conditions being necessary (necessity) versus
           sufficient (sufficiency).
:END:
#+end_note

#+begin_info
  - while p, then q
  - where p, q
  - p, therefore q
  - q follows from p
#+end_info
** DONE UOH
   CLOSED: [2018-01-19 Fri 18:35]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 18:27]--[2018-01-19 Fri 18:42] =>  0:15
   :END:
#+begin_note
  Let /p/ and /q/ be the propositions:

  /p/: You applied for admission at BYU-Idaho.

  /q/: You were accepted.

  Express these sentences as propositions using logical connectives:
  1. Your applying for admission at BYU-Idaho is necessary for your being
     accepted.
  2. Your being accepted is a sufficient condition for your applying for
     admission at BYU-Idaho.
  3. Your applying for admission at BYU-Idaho is necessary and sufficient for
     your being accepted.
#+end_note

#+begin_info
  1. /q/ \rightarrow /p/
/p/ is necessary for /q/
  2. /q/ \rightarrow /p/
/q/ is sufficient for /p/
  3. /p/ \harr /q/
/p/ is necessary and sufficient for /q/, and /q/ is necessary and sufficient for /p/
#+end_info
** DONE OZD *
   CLOSED: [2018-01-19 Fri 21:25]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 21:14]--[2018-01-19 Fri 21:25] =>  0:11
   :END:
#+begin_note
  Determine whether these conditional statements are true or false:
  1. If 2 + 2 = 4, then pigs can fly.
  2. If 2 + 7 = 5, then Elvis Presley is still alive.
  3. If pigs can fly, then dogs can\rsquo{}t fly.
  4. If dogs have four legs, then ostriches have two legs.
#+end_note

#+begin_info
  1. False. Even if 2 + 2 = 4, pigs cannot fly (As far as I know...). Also, a pig's ability to fly does not rely on the sum of 2 and 2.
  2. False. The statements share no correlation and are both false.
  3. False. A dog's ability to fly or not does not rely on a pig's ability to fly.
  4. True. The statement is true, though neither of the statements share any correlation. Essentially, a dog having four 
legs does not affect whether an ostrich will have two legs or not. 
#+end_info
** DONE UZM
   CLOSED: [2018-01-19 Fri 19:09]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 18:47]--[2018-01-19 Fri 19:09] =>  0:22
   :END:
#+begin_note
  Determine whether these biconditionals are true or false:
  1. 2 + 1 = 3 if and only if 1 + 2 = 3.
  2. 1 + 2 = 3 if and only if 3 + 1 = 6.
  3. 1 + 3 = 2 if and only if the earth is flat.
  4. 1 < 2 if and only if 2 < 3.
#+end_note

#+begin_info
  1. True. 2 + 1 cannot equal anything else than 3 if 1 + 2 = 3.
  2. False. 1 + 2 can equal 3 even if 3 + 1 \ne 6.
  3. False. 1 + 3 = 2 is not dependent on the earth being flat.
  4. False. 2 < 3 does not ensure that 1 is less than 2.
#+end_info
** DONE OOY *
   CLOSED: [2018-01-19 Fri 21:31]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 21:25]--[2018-01-19 Fri 21:31] =>  0:06
   :END:
#+begin_note
  Write each of these sentences as \lsquo{}if p, then q\rsquo statements:
  1. It is necessary to sign up to win the contest.
  2. I get a cold whenever I go outside.
  3. It is sufficient to be an A student to receive the scholarship.
  4. As long as you leave now, you will get there on time.
  5. I\rsquo{}ll get half off if I act now.
#+end_note

#+begin_info
  1. If you won the contest, then you signed up.
  2. If I get a cold, then I went outside.
  3. If a student receives a scholarship, then they are an A student.
  4. If you will get there on time, then you will leave now.
  5. If I will get half off, then I will act now.
#+end_info
** DONE OKJ *
   CLOSED: [2018-01-20 Sat 11:48]
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 11:34]--[2018-01-20 Sat 11:48] =>  0:14
   :END:
   See Puzzle UFZ below.
#+begin_note
  Write the converse, inverse, and contrapositive of each of these statements:
  1. If it rains today, we won\rsquo{}t go to the park.
  2. If you do your homework, I\rsquo{}ll give you a pat on the back.
  3. Whenever I babysit, I get sick.
  4. Every time there is a quiz, I go to class.
  5. I wake up late when I stay up past my bedtime.
#+end_note

#+begin_info
  1. Converse: We won't go to the park if it rains today.
     Inverse: If it doesn't rain today, we will go to the park.
     Contrapositive: We will go to the park if it doesn't rain today.

  2. Converse: I'll give you a pat on the back if you do your homework.
     Inverse: If you don't do your homework, I won't give you a pat on the back.
     Contrapositive: I won't give you a pat on the back if you don't do your homework.

  3. Converse: I get sick whenever I babysit.
     Inverse: Whenever I don't babysit, I don't get sick.
     Contrapositive: I don't get sick whenever I don't babysit.

  4. Converse: I go to class every time there is a quiz.
     Inverse: Every time there is not a quiz, I don't go to class.
     Contrapositive: I don't go to class every time there is not a quiz.

  5. Converse: When I stay up past my bedtime, I wake up late.
     Inverse: I don't wake up late when I don't stay up past my bedtime.
     Contrapositive:  When I don't stay up past my bedtime, I don't wake up late.
 
#+end_info
** DONE UVH
   CLOSED: [2018-01-19 Fri 19:35]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 19:10]--[2018-01-19 Fri 19:35] =>  0:25
   :END:
#+begin_note
  Construct a truth table for each  of these propositions:
  1. $\mathsf{p} \rightarrow \mathsf{q}$
  2. $\mathsf{p} \oplus \mathsf{q}$
  3. $\mathsf{p} \rightarrow \mathsf{q}$
  4. $\not \mathsf{p} \rightarrow \mathsf{q}$
  5. $\mathsf{p} \wedge \not \mathsf{q}$
#+end_note

#+begin_info
1.
   p     \rightarrow     q
+-----+-----+-----+
|  0  |  1  |  0  |
+-----+-----+-----+
|  0  |  1  |  1  |
+-----+-----+-----+
|  1  |  0  |  0  |
+-----+-----+-----+
|  1  |  1  |  1  |
+-----+-----+-----+

2.
   p     \oplus     q
+-----+-----+-----+
|  0  |  0  |  0  |
+-----+-----+-----+
|  0  |  1  |  1  |
+-----+-----+-----+
|  1  |  1  |  0  |
+-----+-----+-----+
|  1  |  0  |  1  |
+-----+-----+-----+

3.
   p     \rightarrow     q
+-----+-----+-----+
|  0  |  1  |  0  |
+-----+-----+-----+
|  0  |  1  |  1  |
+-----+-----+-----+
|  1  |  0  |  0  |
+-----+-----+-----+
|  1  |  1  |  1  |
+-----+-----+-----+

4.
   \not     p     \rightarrow     q
+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+
|  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+
|  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |
+-----+-----+-----+-----+

5.
   p     \land     \not     q
+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |
+-----+-----+-----+-----+
|  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+

#+end_info
** DONE OJM *
   CLOSED: [2018-01-20 Sat 11:56]
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 11:48]--[2018-01-20 Sat 11:56] =>  0:08
   :END:
#+begin_note
  Construct a truth table for each  of these propositions:
  1. $\mathsf{p} \rightarrow (\lnot \mathsf{p})$
  2. $\mathsf{p} \leftrightarrow \mathsf{q}$
  3. $\mathsf{p} \leftrightarrow (\lnot \mathsf{p})$
  4. $\mathsf{p} \land \mathsf{p}$
  5. $\mathsf{p} \lor \mathsf{p}$
#+end_note

#+begin_info
1.
   p     \rightarrow     \not     p
+-----+-----+-----+-----+
|  0  |  1  |  1  |  0  |
+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+

2.
   p     \harr     q
+-----+-----+-----+
|  0  |  0  |  0  |
+-----+-----+-----+
|  0  |  0  |  1  |
+-----+-----+-----+
|  1  |  0  |  0  |
+-----+-----+-----+
|  1  |  1  |  1  |
+-----+-----+-----+

3.
   p     \harr     \not     p
+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |
+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+

4.
   p     \land    p
+-----+-----+-----+
|  0  |  0  |  0  |
+-----+-----+-----+
|  1  |  1  |  1  |
+-----+-----+-----+

5.
   p     \lor    p
+-----+-----+-----+
|  0  |  0  |  0  |
+-----+-----+-----+
|  1  |  1  |  1  |
+-----+-----+-----+

#+end_info
** DONE ULQ *
   CLOSED: [2018-01-20 Sat 12:10]
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 11:56]--[2018-01-20 Sat 12:10] =>  0:14
   :END:
#+begin_note
  Construct a truth table for (p \rarr q) \rarr (q \rarr r) \rarr (r \rarr s).
#+end_note

#+begin_info
  (p     \rightarrow     q)    \rightarrow    (q     \rightarrow     r)    \rightarrow    (r     \rightarrow     s)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  1  |  0  |  1  |  1  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  1  |  1  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  0  |  1  |  1  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

How interesting! ((p \rightarrow q) \rightarrow (q \rightarrow r)) \harr (q \rightarrow r) and ((q \rightarrow r) \rightarrow (r \rightarrow s)) \harr (r \rightarrow s)

#+end_info
** DONE OTD
   CLOSED: [2018-01-19 Fri 19:49]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 19:35]--[2018-01-19 Fri 19:49] =>  0:14
   :END:
#+begin_note
  Construct a truth table for (p \lor q) \land (\not p \lor r) \rightarrow (q v r).
#+end_note

#+begin_info
  (p    \lor     q)    \land    (\not     p    \lor     r)    \rightarrow    (q    \lor     r)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  0  |  1  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  0  |  0  |  1  |  0  |  0  |  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  1  |  0  |  1  |  1  |  1  |  1  |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  0  |  1  |  0  |  0  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

#+end_info
** DONE OKQ *
   CLOSED: [2018-01-19 Fri 21:16]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 21:05]--[2018-01-19 Fri 21:15] =>  0:10
   :END:
#+begin_note
  Show that $(p \leftrightarrow q) \wedge (p \leftrightarrow r)$ and $p \leftrightarrow (q \wedge r)$ are logically equivalent.
:HINT:
  - Hint :: Use a truth table to show instead why these two propositions are
            /not/ logically equivalent.
:END:
#+end_note

#+begin_info
  (p     \leftrightarrow     q)    \wedge   (p     \leftrightarrow     r)    \equiv     p     \leftrightarrow    (q     \wedge    r)  
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  1  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  0  |  0  |  0  |  0  |  1  | *0* |  0  |  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |  0  |  1  |  0  | *0* |  0  |  1  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  |  0  |  0  |  0  |  1  |  1  |  0  |  0  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  1  |  0  |  0  |  1  |  1  |  0  |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  |  0  |  1  |  1  |  1  |  1  |  1  |  0  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  1  |  0  |  0  |  1  |  1  |  0  |  1  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

(p \leftrightarrow q) \wedge (p \leftrightarrow r)$ and $p \leftrightarrow (q \wedge r) are not equivalent. They differ in two areas (as shown in the truth table above).

#+end_info
** DONE UKF
   CLOSED: [2018-01-19 Fri 20:05]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 19:51]--[2018-01-19 Fri 20:05] =>  0:14
   :END:
#+begin_note
  Show that $\neg(p \leftrightarrow q)$ and $p \leftrightarrow \neg q$ are logically equivalent.
#+end_note

#+begin_info
   \not    (p     \leftrightarrow     q)    \equiv     p     \leftrightarrow     \not     q
+-----+-----+-----+-----+-----+-----+-----+-----+-----+ 
|  0  |  0  |  1  |  0  |  1  |  0  |  0  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+ 
|  1  |  0  |  0  |  1  |  1  |  0  |  1  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+ 
|  1  |  1  |  0  |  0  |  1  |  1  |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  1  |  0  |  0  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+

#+end_info
** DONE OKL
   CLOSED: [2018-01-19 Fri 20:44]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 20:08]--[2018-01-19 Fri 20:44] =>  0:36
   :END:
#+begin_note
  Determine if $(p \vee q) \wedge (\neg p \vee r) \rightarrow (q \vee r)$ is a tautology.
#+end_note

#+begin_info
  The function (p \vee q) \wedge (\neg p \vee r) \rightarrow (q \vee r) is a tautology because it is true and only true.
  The following truth table illustrates this:

  (p    \lor     q)    \land    (\not     p    \lor     r)    \rightarrow    (q    \lor     r)
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  1  |  0  |  1  |  0  | *1* |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  |  0  |  1  |  0  |  1  |  1  | *1* |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  0  |  1  |  0  | *1* |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  0  |  1  |  1  |  1  |  1  |  0  |  1  |  1  | *1* |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  0  |  0  |  1  |  0  |  0  | *1* |  0  |  0  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  0  |  1  |  0  |  1  |  1  |  1  | *1* |  0  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  0  |  0  |  1  |  0  |  0  | *1* |  1  |  1  |  0  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  |  1  |  0  |  1  |  1  |  1  | *1* |  1  |  1  |  1  |
+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+-----+

#+end_info
** DONE UEZ
   CLOSED: [2018-01-19 Fri 20:57]
   :LOGBOOK:
   CLOCK: [2018-01-19 Fri 20:44]--[2018-01-19 Fri 20:57] =>  0:13
   :END:
#+begin_note
  Find a compound proposition involving the propositional variables /p/, /q/, and /r/
  that is true when /p/ and /q/ are true and /r/ is false, but is false otherwise.
#+end_note

#+begin_info
  (p     \land    q)    \land     \not     r
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  | *0* |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  0  | *0* |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  | *0* |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  0  |  0  |  1  | *0* |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  | *0* |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  1  |  0  |  0  | *0* |  0  |  1  |
+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  | *0* |  1  |  0  |
+-----+-----+-----+-----+-----+-----+
|  1  |  1  |  1  | *1* |  0  |  1  |
+-----+-----+-----+-----+-----+-----+

Result = (/p/ \land /q/) \land \not /r/
#+end_info
** DONE OYW *
   CLOSED: [2018-01-20 Sat 12:32]
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 12:13]--[2018-01-20 Sat 12:32] =>  0:19
   :END:
#+begin_note
#+BEGIN_SRC emacs-lisp :results silent
  (defun --> (p q)
    "Conditional: p only if q"
    (or (not p) q))

  (defun <--> (p q)
    "Biconditional: p if and only if q"
    (and (--> p q) (--> q p)))

  (defun xor (p q)
    "Exclusive or."
    (if p (not q) q))

  (defun valid-connective (op)
    (or (eq op 'and) (eq op 'or) (eq op 'xor)
        (eq op '-->) (eq op '<-->)))
#+END_SRC

  *I added the XOR above*

  The =prop-eval= function evaluates propositions that are based on vectors of
  symbols, prompting the user for their truth values, combining them two-by-two
  with the valid connectives, and minimally formatting the output. It even
  checks for errors!

#+BEGIN_SRC emacs-lisp :results silent
  (defun prop-eval (prop)
    (unless (and (vectorp prop)
                 (= 3 (length prop))
                 (valid-connective (elt prop 1)))
      (error "bad parameters"))
    (let* ((op (elt prop 1))
           (l (eval (elt prop 0)))
           (r (eval (elt prop 2)))
           (lval (y-or-n-p (mapconcat 'symbol-name l " ")))
           (rval (y-or-n-p (mapconcat 'symbol-name r " ")))
           (result (eval (list op lval rval))))
      (list l (list lval) op r (list rval) 'yields result)))
#+END_SRC

  Try it with a couple of compound propositions:

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((p [It is raining])
         (q [The grass is wet])
         (p-and-q [p and q]))
    (prop-eval p-and-q))
#+END_SRC

#+RESULTS:
([It is raining] (t) and [The grass is wet] (t) yields t)

: ([It is raining] (t) and [The grass is wet] (t) yields t)

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((p [It is raining])
         (q [The grass is wet])
         (p-onlyif-q [p --> q]))
    (prop-eval p-onlyif-q))
#+END_SRC

: ([It is raining] (t) --> [The grass is wet] (nil) yields nil)

  You try it with the other three connectives.
#+END_SRC
#+end_note

#+begin_info
*OR*:

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((p [It is raining])
         (q [The grass is wet])
         (p-or-q [p or q]))
    (prop-eval p-or-q))
#+END_SRC

#+RESULTS:
([It is raining] (nil) or [The grass is wet] (t) yields t)

*If and only if*:

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((p [It is raining])
         (q [The grass is wet])
         (p-ifandonlyif-q [p <--> q]))
    (prop-eval p-ifandonlyif-q))
#+END_SRC

#+RESULTS:
([It is raining] (t) <--> [The grass is wet] (nil) yields nil)

*XOR*:

#+BEGIN_SRC emacs-lisp :results raw
  (let* ((p [It is raining])
         (q [The grass is wet])
         (p-xor-q [p xor q]))
    (prop-eval p-xor-q))
#+END_SRC

#+RESULTS:
([It is raining] (t) xor [The grass is wet] (t) yields nil)

#+end_info
** TODO UEF *
#+begin_note
  Study this fancier version of =prop-eval= (and supporting cast). Note that
  this code only works for simple propositions consisting of three symbols --- l
  op r, to abbreviate. How would you make it handle more complex propositions?

#+BEGIN_SRC emacs-lisp :results silent
  (defun stringify (prop)
    (let* ((str (mapconcat 'symbol-name prop " ")))
      (downcase (substring str 0 (- (length str) 1)))))

  (defun fancier-prompt (str)
    (let* ((prompt (concat "Is it the case that " str "? "))
           (answer (y-or-n-p-with-timeout prompt 5 t)))
      (princ (format "Given %s is %s\n" str (if answer 'true: 'false:)))
      answer))

  (defun fancier-output (result l op r)
    (princ (format "It is %s that %s %s %s.\n"
                   (if result 'true 'false)
                   l op r)))

  (defun prop-eval (prop)
    (unless (and (vectorp prop)
                 (= 3 (length prop))
                 (valid-connective (elt prop 1)))
      (error "bad parameters"))
    (let* ((op (elt prop 1))
           (l (eval (elt prop 0)))
           (r (eval (elt prop 2)))
           (lstr (stringify l))
           (rstr (stringify r))
           (lval (fancier-prompt lstr))
           (rval (fancier-prompt rstr))
           (result (eval (list op lval rval))))
      (fancier-output result lstr op rstr)))
#+END_SRC

  Note the periods to close sentences properly and allow =stringify= to do its
  job better:

#+BEGIN_SRC emacs-lisp :results output
  (let* ((p [It is raining.])
         (q [The grass is wet.])
         (p-onlyif-q [p --> q]))
    (prop-eval p-onlyif-q))
#+END_SRC

: Given it is raining is true:
: Given the grass is wet is true:
: It is true that it is raining --> the grass is wet.
#+end_note
** DONE OUB
   CLOSED: [2018-01-20 Sat 11:17]
   :LOGBOOK:
   CLOCK: [2018-01-20 Sat 10:42]--[2018-01-20 Sat 11:17] =>  0:35
   :END:
#+begin_note
  1. Implement the reverse conditional function (=<--=).

  2. Find two shorter ways to correctly implement the biconditional function (=<-->=).
#+end_note
  1. /p/: Cutting your hair.
     
     /q/: Having short hair.
     
     Cutting your hair is necessary for having short hair.
     
     Having short hair is a sufficient condition for having cut your hair.
     
     /p/ \leftarrow /q/
  
  2. a) /p/: d/dx(2x + 3)
  
        /q/: 2

        /p/ \harr /q/

        Essentially, 2 is equivalent to the derivative in terms of x of (2x + 3), and d/dx(2x + 3) = 2.

     b) /r/: p

        /s/: \not p

        \not/s/ \harr /r/
        
        (also, \not/r/ \harr /s/)

   \not     s           \harr     r
   \not    (\not     p)    \harr     p
+-----+-----+-----+-----+-----+
|  0  |  1  |  0  | *1* |  0  |
+-----+-----+-----+-----+-----+
|  1  |  0  |  1  | *1* |  1  |
+-----+-----+-----+-----+-----+

#+begin_info
  
#+end_info
** TODO UQY *
#+begin_note
  This is an exercise in implementing logic gate Boolean functions to generate
  truth tables of compound Boolean functions.

  Specifically, your task is to implement the =not1=, =or2= and =and2=
  functions, *arithmetically* (i.e., do /not/ use any conditional logic --- =if=
  or =cond= or the like). Use *only* the operators +, -, and *. The inputs to
  these three functions will be zeros or ones only. You\rsquo{}ll know you got it right
  when you only get =t= from evaluating the final three code blocks.

#+BEGIN_SRC emacs-lisp :results silent
  (defun not1 (x)
    ;; implement me
  )

  (defun and2 (x y)
    ;; implement me
  )

  (defun or2 (x y)
    ;; implement me
  )
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
  (defun truth-table-row-inputs (i)
    (elt [[0 0 0] [0 0 1] [0 1 0] [0 1 1]
          [1 0 0] [1 0 1] [1 1 0] [1 1 1]] i))

  (defun truth-table-row-with-output (i func)
    (let* ((inputs (append (truth-table-row-inputs i) nil))
           (output (apply func inputs)))
      (apply 'vector (append inputs (list output)))))

  (defun f1 (p q r)
    (or2 (and2 p q) (not1 r)))

  (defun f2 (p q r)
    (and2 p (or2 q (not1 r))))

  (defun f3 (p q r)
    (or2 p (and2 q r)))

  (defun generate-truth-table-for (func)
    (vector (truth-table-row-with-output 0 func)
            (truth-table-row-with-output 1 func)
            (truth-table-row-with-output 2 func)
            (truth-table-row-with-output 3 func)
            (truth-table-row-with-output 4 func)
            (truth-table-row-with-output 5 func)
            (truth-table-row-with-output 6 func)
            (truth-table-row-with-output 7 func)))
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
   (equal (generate-truth-table-for 'f1)
          [[0 0 0 1]
           [0 0 1 0]
           [0 1 0 1]
           [0 1 1 0]
           [1 0 0 1]
           [1 0 1 0]
           [1 1 0 1]
           [1 1 1 1]])
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
   (equal (generate-truth-table-for 'f2)
          [[0 0 0 0]
           [0 0 1 0]
           [0 1 0 0]
           [0 1 1 0]
           [1 0 0 1]
           [1 0 1 0]
           [1 1 0 1]
           [1 1 1 1]])
#+END_SRC

#+BEGIN_SRC emacs-lisp :results silent
   (equal (generate-truth-table-for 'f3)
          [[0 0 0 0]
           [0 0 1 0]
           [0 1 0 0]
           [0 1 1 1]
           [1 0 0 1]
           [1 0 1 1]
           [1 1 0 1]
           [1 1 1 1]])
#+END_SRC
#+end_note
* Puzzles
** TODO OQP
#+begin_note
  The way to deal with lisp expressions is to look for lists, and when found,
  evaluate them. Finding them is easy --- lisp code consists of lists, and lists
  of lists nested to many levels. Evaluating a list entails evaluating each of
  its elements, except the first, which is treated differently. For now, think
  of the first element as an operator that operates on the values of the rest of
  the elements. These values are called the operands. So =(+ 1 2 3 4)= adds
  together operands 1, 2, 3, and 4 to produce 10. Note the economy of this
  /prefix/ notation, as it\rsquo{}s called: only one mention of the =+= sign is needed.
  The more familiar /infix/ notation requires redundant =+= signs, as in
  =1+2+3+4=.

  Now is the time to overcome inertia and gain some momentum with elisp. Find at
  [[file:elisp-mini-primer.org][this link a mini-primer]] and work through it in emacs.
:HINT:
  - Hint :: You will be well served to work through this mini-primer carefully
            and thoroughly. So much to come depends on your grasping the basics!
:END:
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
    Not applicable.
** TODO USV
#+begin_note
  Or pyrire jvgu ahzoref. Svaq n jnl gb vafreg vagb gurfr gra yvarf gur sbhe
  fgnaqneq zngu bcrengbef (+, -, \gvzrf, \qvi), be ! (snpgbevny), be \enqvp (fdhner ebbg),
  naq cneragurfrf sbe tebhcvat, gb znxr gra qvssrerag rkcerffvbaf gung rnpu
  rinyhngr gb 6. Sbe rknzcyr: \enqvp4 + \enqvp4 + \enqvp4 = 6.
  | 0 |   | 0 |   | 0 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 1 |   | 1 |   | 1 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 2 |   | 2 |   | 2 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 3 |   | 3 |   | 3 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 4 |   | 4 |   | 4 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 5 |   | 5 |   | 5 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 6 |   | 6 |   | 6 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 7 |   | 7 |   | 7 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 8 |   | 8 |   | 8 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
  | 9 |   | 9 |   | 9 |   | = | 6 |
  |   |   |   |   |   |   |   |   |
:HINT:
  - Hint :: The puzzle is first of all to figure out what this exercise/problem
            is asking. Did you work all the way through the Elisp Mini Primer
            (see OQP)?
:END:
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
    Verify with code calculations.
** TODO UFZ
#+begin_note
  Investigate the variations of conditional statements known as the /converse/,
  the /inverse/ and the /contrapositive/.
#+end_note
*** Rephrase
*** Approach
*** Solution
*** Proof
    Not applicable.
